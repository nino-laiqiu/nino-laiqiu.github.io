<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux常用命令</title>
    <url>/2020/11/12/Common-Commands-In-Linux/</url>
    <content><![CDATA[<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>rm filename:删除文件</p>
<p>rm -r :询问删除目录内容或者文件</p>
<p>rm -rf   删除当前目录下的所有文件及目录，并且是直接删除</p>
<p>rm  -r  *  删除当前目录下的所有内容</p>
<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>cat -n filename:给文件内容添加行号,空行也添加</p>
<p>cat -b filename:给文件内容添加行号,空行跳过</p>
<p><strong>cat /dev/null &gt; /pathname:删除文件的内容</strong></p>
<h4 id="mv-options安全参数"><a href="#mv-options安全参数" class="headerlink" title="mv(options安全参数)"></a>mv(options安全参数)</h4><p>mv /root/a.txt /root/b.txt :目标目录与原目录一致，指定了新文件名，效果就是仅仅重命名</p>
<p>mv /root/a.txt /root/catalogue/ :目标目录与原目录不一致，没有指定新文件名，效果就是仅仅移动</p>
<p>mv /root/a.txt /root/aa/b.txt :目标目录与原目录一致, 指定了新文件名，效果就是：移动 + 重命名</p>
<p>mv /root/* .  :把root目录的所有内容移动到当前目录;需要先执行显示隐藏文件命令，否则隐藏文件以及隐藏文件夹不会被移动到新目录</p>
<h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>cp a.txt  /catalogue 复制文件到目录</p>
<p>cp a.txt /b.txt 复制文件到文件,文件存在则是覆盖,不存在则是重命名</p>
<p>cp -r  :递归处理 复制目录</p>
<p>cp-p :保留文件属性(原文件事件不变)</p>
<h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>touch file :创建一个名为“file”的新的空白文件 </p>
<p>touch testfile  :修改文件testfile的时间属性</p>
<h4 id="chgrp、chmod、chown"><a href="#chgrp、chmod、chown" class="headerlink" title="chgrp、chmod、chown"></a>chgrp、chmod、chown</h4><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find / -name “*.txt” :将目前目录及其子目录下所有延伸档名是txt 的文件列出来。</p>
<p>find / -type f :将目前目录其其下子目录中所有一般文件列出</p>
<p>find / ctime -20 :查找最近20天修改过的文件</p>
<h4 id="less-more"><a href="#less-more" class="headerlink" title="less more"></a>less more</h4><h4 id="head-tail"><a href="#head-tail" class="headerlink" title="head tail"></a>head tail</h4><p>head -n 5 ls-output.txt  :查看开头五行内容 </p>
<p>tail -n 5 ls-output.txt :查看结尾五行内容</p>
<h4 id="awk-未完"><a href="#awk-未完" class="headerlink" title="awk(未完)"></a>awk(未完)</h4><p>awk ‘{print $1,$4}’ b.txt :取文件每一行的第一和第四项打印</p>
<h2 id="文档编辑"><a href="#文档编辑" class="headerlink" title="文档编辑"></a>文档编辑</h2><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>grep  characters  *txt :查找文件名后缀带有txt内容有characters,并打印该行</p>
<p>grep  -r words  /root :递归查找路径下内容有words的文件名</p>
<p>grep -v test  *txt :反向查找</p>
<p>文件传输</p>
<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>mkdir -p /filepath :递归创建目录</p>
<h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>ls -A  :显示所有文件和目录,包括隐藏文件</p>
<p>ls -ltr s*:列出目前工作目录下所有名称是 s 开头的文件，越新的排越后面 </p>
<h2 id="磁盘维护"><a href="#磁盘维护" class="headerlink" title="磁盘维护"></a>磁盘维护</h2><h2 id="网络通讯"><a href="#网络通讯" class="headerlink" title="网络通讯"></a>网络通讯</h2><h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h4><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>kill -9 123456:彻底杀死123456进程</p>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>ps -A:显示进程信息</p>
<p>ps -u root:显示root进程用户信息</p>
<p>ps -ef:显示所有命令，连带命令行</p>
<p>ps aux: 查看系统内存中的正在运行的进程</p>
<p>ps -ef|grep ssh :与管道命令组合使用查出特定进程</p>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>top -n 2:设置信息更新次数</p>
<p>top -p 139:显示指定的进程信息</p>
<h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><p>sudo -l :显示出自己（执行 sudo 的使用者）的权限</p>
<p>sudo -u user ls :指定用户执行命令</p>
<h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><p>pstree -apnh:显示进程间的关系</p>
<p>pstree -u:显示用户名称</p>
<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h4 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h4><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><p>yum repolist 软件名称 :列出设定yum源信息</p>
<p>yum remove 软件名称 :卸载</p>
<p>yum list installed :查看已经安装的软件</p>
<p>yum search 软件信息 :根据软件信息搜索软件名字</p>
]]></content>
      <categories>
        <category>Computer engineering</category>
      </categories>
      <tags>
        <tag>basis of computer engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络摘要</title>
    <url>/2020/10/25/Computer-network-interview-questions/</url>
    <content><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h3 id="HTTP基本概念"><a href="#HTTP基本概念" class="headerlink" title="HTTP基本概念"></a>HTTP基本概念</h3><p><strong>HTTP 是超文本传输协议，也就是HyperText Transfer Protocol</strong></p>
<ul>
<li><p>HTTP 是一个用在计算机世界里的协议  . 它使用计算机能够理解的语言确立了一种计算机之间交流通信 的规范（两个以上的参与者），以及相关的各种控制和错误处理方式（行为约定和规范）</p>
</li>
<li><p>HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。(允许中间有中转或接力)</p>
</li>
<li><p>HTTP 传输的内容是「超文本」.「超文本」是超越了普通文本的文本，它是文字、图片、视频等的混合体，关键有超 链接，能从一个超文本跳转到另外一个超文本</p>
</li>
</ul>
<p><strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据 的「约定和规范」</strong></p>
<hr>
<h1 id="全家桶"><a href="#全家桶" class="headerlink" title="全家桶"></a>全家桶</h1><h3 id="IP基础知识"><a href="#IP基础知识" class="headerlink" title="IP基础知识"></a>IP基础知识</h3><p>IP（网络层） 和 MAC （数据链路层）之间的区别和关系?</p>
<p>IP 的作用是主机之间通信用的，而 MAC 的作用则是实现「直连」 的两个设备之间通信，而 IP 则负责在「没有直连」的两个网络之间进行通信传输</p>
<h3 id="IP地址的基础知识"><a href="#IP地址的基础知识" class="headerlink" title="IP地址的基础知识"></a>IP地址的基础知识</h3><h3 id="IP协议相关技术"><a href="#IP协议相关技术" class="headerlink" title="IP协议相关技术"></a>IP协议相关技术</h3>]]></content>
      <categories>
        <category>Computer engineering</category>
      </categories>
      <tags>
        <tag>basis of computer engineering</tag>
        <tag>Reading Books</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2020/11/17/Data-structure-Queue/</url>
    <content><![CDATA[<h4 id="队列实现scala版"><a href="#队列实现scala版" class="headerlink" title="队列实现scala版"></a>队列实现scala版</h4><p>队列是一种特殊的线性表，单向队列只能在一端插入数据（后），另一端删除数据（前）；它和栈一样，队列是一种操作受限制的线性表；进行插入操作的称为队尾，进行删除操作的称为队头；队列中的数据被称为元素；没有元素的队列称为空队列。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">Arithmetic</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> queue = <span class="keyword">new</span> <span class="type">ArrayQueue</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//初始化一个队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      println(<span class="string">&quot;请输入命令 \n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;1.判断是否为空 \n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;2.判断是否已满 \n\t &quot;</span> +</span><br><span class="line">        <span class="string">&quot;3.添加数据\n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;4.展示内容\n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;5.获取数据 \n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;6.获取头节点\t\n&quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> str = <span class="type">StdIn</span>.readLine()</span><br><span class="line">      str <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> =&gt; queue.isNull()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> =&gt; queue.isFull()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> =&gt; addData()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;4&quot;</span> =&gt; queue.show()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;5&quot;</span> =&gt;</span><br><span class="line">          <span class="keyword">val</span> value = queue.getData()</span><br><span class="line">          <span class="keyword">if</span> (!value.isInstanceOf[<span class="type">Exception</span>]) &#123;</span><br><span class="line">            println(value)</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;6&quot;</span> =&gt;</span><br><span class="line">          <span class="keyword">val</span> value = queue.peek()</span><br><span class="line">          <span class="keyword">if</span> (!value.isInstanceOf[<span class="type">Exception</span>]) &#123;</span><br><span class="line">            println(value)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addData</span></span>() = &#123;</span><br><span class="line">    println(<span class="string">&quot;请输入数字&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> i = <span class="type">StdIn</span>.readInt()</span><br><span class="line">    queue.addData(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组来模拟队列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>(<span class="params">maxCapacity: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化一个数组</span></span><br><span class="line">  <span class="keyword">val</span> queue = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](maxCapacity<span class="number">-1</span>)</span><br><span class="line">  <span class="comment">//-1是不包含数组数据的(队列的头)</span></span><br><span class="line">  <span class="keyword">var</span> first: <span class="type">Int</span> = <span class="number">-1</span></span><br><span class="line">  <span class="comment">//表示队列添加到哪的索引</span></span><br><span class="line">  <span class="keyword">var</span> rear: <span class="type">Int</span> = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断是否满了</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isFull</span></span>(): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (first == maxCapacity) &#123;</span><br><span class="line">      println(<span class="string">&quot;已经满了&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      println(<span class="string">&quot;队列没有满可以添加元素&quot;</span>)</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断队列是否为空</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isNull</span></span>(): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (first == rear) &#123;</span><br><span class="line">      println(<span class="string">&quot;队列是空的&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      println(<span class="string">&quot;可添加元素&quot;</span>)</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加到队列</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addData</span></span>(number: <span class="type">Int</span>) = &#123;</span><br><span class="line">    <span class="comment">//首先rear要后移一个单位</span></span><br><span class="line">    rear += <span class="number">1</span></span><br><span class="line">    <span class="comment">//往数组添加数据</span></span><br><span class="line">    queue(rear) = number</span><br><span class="line">    <span class="comment">//返回值</span></span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取队列的元素,是first加1 但是原来的数据还是存在的,只是访问不到了,需要判断是否有异常</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getData</span></span>(): <span class="type">Any</span> = &#123;</span><br><span class="line">    <span class="comment">//首先判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span>  <span class="type">Exception</span>(<span class="string">&quot;空&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      first += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> queue(first)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//peek方法获取头节点,但是不改变first的值</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">peek</span></span>(): <span class="type">Any</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">&quot;空&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> queue(first + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//展示队列的内容</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- first + <span class="number">1</span> to rear) &#123;</span><br><span class="line">      printf(<span class="string">&quot;队列%s 内容%d \t\n&quot;</span>, i, queue(i))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">Arithmetic</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"><span class="comment">//核心思想: 用%来模拟循环(rear +1) /maxsize = first 时为满</span></span><br><span class="line"><span class="comment">//核心思想2:遍历元素时,假设rear节点在first节点之前采用(rear- first)就无法获取数据,</span></span><br><span class="line"><span class="comment">//采用取模的方法来获取队列到底用多少数据 (rear - first + maxCapacity) % maxCapacity</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CircleQueue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> queue = <span class="keyword">new</span> <span class="type">ArrayCircleQueue</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      println(<span class="string">&quot;请输入命令 \n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;1.判断是否为空 \n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;2.判断是否已满 \n\t &quot;</span> +</span><br><span class="line">        <span class="string">&quot;3.添加数据\n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;4.展示内容\n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;5.获取数据 \n\t&quot;</span> +</span><br><span class="line">        <span class="string">&quot;6.获取头节点\t\n&quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> str = <span class="type">StdIn</span>.readLine()</span><br><span class="line">      str <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> =&gt; queue.isNull()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> =&gt; queue.isFull()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> =&gt; addData()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;4&quot;</span> =&gt; queue.show()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;5&quot;</span> =&gt;</span><br><span class="line">          <span class="keyword">val</span> value = queue.getData()</span><br><span class="line">          <span class="keyword">if</span> (!value.isInstanceOf[<span class="type">Exception</span>]) &#123;</span><br><span class="line">            println(value)</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;6&quot;</span> =&gt;</span><br><span class="line">          <span class="keyword">val</span> value = queue.peek()</span><br><span class="line">          <span class="keyword">if</span> (!value.isInstanceOf[<span class="type">Exception</span>]) &#123;</span><br><span class="line">            println(value)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addData</span></span>() = &#123;</span><br><span class="line">    println(<span class="string">&quot;请输入数字&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> i = <span class="type">StdIn</span>.readInt()</span><br><span class="line">    queue.addData(i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayCircleQueue</span>(<span class="params">maxCapacity: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//数组模拟队列</span></span><br><span class="line">  <span class="keyword">val</span> queue = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](maxCapacity)</span><br><span class="line">  <span class="comment">//两个指针分别代表存取,初始化为0</span></span><br><span class="line">  <span class="keyword">var</span> first: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> rear: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断是否为空</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isNull</span></span>(): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    first == rear</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断是否已满</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isFull</span></span>(): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="comment">//最后一个节点不存储数据,%取余与first比较</span></span><br><span class="line">    (rear + <span class="number">1</span>) % maxCapacity == first</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加元素</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addData</span></span>(number: <span class="type">Int</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">    <span class="comment">//首尔判断是否为满</span></span><br><span class="line">    <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">      println(<span class="string">&quot;队列已经满了&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue(rear) = number</span><br><span class="line">    <span class="comment">//rear指针后移</span></span><br><span class="line">    rear = (rear + <span class="number">1</span>) % maxCapacity</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取元素</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getData</span></span>(): <span class="type">Any</span> = &#123;</span><br><span class="line">    <span class="comment">//首先判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line">      println(<span class="string">&quot;该队列为空请添加元素&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用临时节点存储要返回的数据</span></span><br><span class="line">    <span class="keyword">var</span> result = queue(first)</span><br><span class="line">    <span class="comment">//后移first节点</span></span><br><span class="line">    first = (first + <span class="number">1</span>) % maxCapacity</span><br><span class="line">    <span class="comment">//返回要get的队列数据</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取头节点</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">peek</span></span>(): <span class="type">Any</span> = &#123;</span><br><span class="line">    <span class="comment">//和非循环的写法一致</span></span><br><span class="line">    <span class="keyword">return</span> queue(first)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//遍历队列</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>(): <span class="type">Any</span> = &#123;</span><br><span class="line">    <span class="comment">//这是一个难点,我要保证我能获取之后添加的数据</span></span><br><span class="line">    <span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line">      println(<span class="string">&quot;队列为空&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历队列</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- first until first + size) &#123;</span><br><span class="line">      printf(<span class="string">&quot;array(%d)=%s \t\n&quot;</span>, i % maxCapacity, queue(i % maxCapacity))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取队列的长度</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">size</span></span>(): <span class="type">Int</span> = &#123;</span><br><span class="line">    (rear - first + maxCapacity) % maxCapacity</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Computer engineering</category>
        <category>Arithmetic</category>
      </categories>
      <tags>
        <tag>Reading Books</tag>
        <tag>Sorting and Searching Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式理论</title>
    <url>/2020/11/16/Distributed-Theory/</url>
    <content><![CDATA[<h2 id="分布式理论"><a href="#分布式理论" class="headerlink" title="分布式理论"></a>分布式理论</h2>]]></content>
      <categories>
        <category>Computer engineering</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
        <tag>Work Systematically</tag>
      </tags>
  </entry>
  <entry>
    <title>流处理基础</title>
    <url>/2020/10/23/Flowprocessing-foundation/</url>
    <content><![CDATA[<blockquote>
<p>摘自: 基于Apache Flink的流处理</p>
</blockquote>
<h1 id="1-dataflow编程概述"><a href="#1-dataflow编程概述" class="headerlink" title="1.dataflow编程概述"></a>1.dataflow编程概述</h1><ol>
<li><p>dataflow图(算子 数据源 数据汇)</p>
</li>
<li><p>数据并行和任务并行</p>
</li>
<li><p>数据交换策略:</p>
<p>转发策略(发送端任务和接收端任务之间一一对应进行传输)<br>广播策略()<br>基于键值的策略(根据某一键值属性对数据分区)<br>随机策略</p>
</li>
</ol>
<h1 id="2-并行流处理"><a href="#2-并行流处理" class="headerlink" title="2.并行流处理"></a>2.并行流处理</h1><p><strong>延迟:表示处理一个事件所需要的的时间<br>吞吐:用来衡量系统处理能力(处理速率)的指标</strong></p>
<p>处理速率取决于数据到来速率,因此吞吐低不意味着性能差<br>通过并行处理多条数据流,可以在处理更多事件的同时降低延迟</p>
<p><strong>无状态:处理事件时无需依赖已经处理过的事件<br>有状态:维持内部状态</strong></p>
<p>数据接入与输出<br>转换操作<br>滚动聚合(例如求和 最小值 最大值)<br>窗口操作(“桶”的有限事件集合):滚动窗口 滑动窗口 会话窗口</p>
<h1 id="3-时间语义"><a href="#3-时间语义" class="headerlink" title="3.时间语义"></a>3.时间语义</h1><p><strong>处理时间:当前流处理算子所在机子的本地时钟时间<br>事件时间:数据流实际发生时间(将处理速度和内容结果彻底解耦)</strong></p>
<p>问题:如何处理延迟事件</p>
<p><strong>水位线:一个全局进度指标,表示我们确信不会再有延迟事件到来的某个时间点</strong></p>
<p>虽然处理时间提供了很低的延迟,但是结果依赖于处理速度,具有不确定性<br>事件时间能保证结果的准确性.并且允许处理延迟甚至无序的事件</p>
<h1 id="4-状态与一致性模型"><a href="#4-状态与一致性模型" class="headerlink" title="4.状态与一致性模型"></a>4.状态与一致性模型</h1><p>传统的处理无限数据的通常方法:将到来的事件分成小批次,不停地在批处理系统上调度并运行作业,其结果都会写入持久化储存中,同时所有算子的状态都将不复存在</p>
<h3 id="流式算子处理面临的挑战"><a href="#流式算子处理面临的挑战" class="headerlink" title="流式算子处理面临的挑战:"></a>流式算子处理面临的挑战:</h3><p>状态管理<br>状态划分<br>状态恢复</p>
<h3 id="任务故障"><a href="#任务故障" class="headerlink" title="任务故障"></a>任务故障</h3><p>任务的执行步骤<br>接收事件并将它们缓存在本地缓冲区<br>选择性地更新内部状态<br>产生输出记录</p>
<h3 id="结果保障"><a href="#结果保障" class="headerlink" title="结果保障"></a>结果保障</h3><ol>
<li><p>关注:流处理引擎内部状态的一致性</p>
</li>
<li><p>至多一次:每个事件至多被处理一次</p>
</li>
<li><p>至少一次:不丢事件<br>持久化事件日志将所有事件写入永久存储,这样任务故障时就可以重放它们<br>记录确认,将所有事件存在缓冲区中,直到处理管道中的所有任务都确认某个事件已经处理完毕才会将时间内丢弃</p>
</li>
<li><p>精确一次:不但没有事件丢失,而且每个事件对于内部状态的更新都只有一个</p>
</li>
<li><p>端到端的精确一次:整个数据处理管道上的结果都是正确的,可以通过弱保障来实现强语义</p>
</li>
</ol>
]]></content>
      <categories>
        <category>The Hadoop Ecosystem</category>
        <category>Learning Flink</category>
      </categories>
      <tags>
        <tag>Reading Books</tag>
        <tag>Bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Flink 架构</title>
    <url>/2020/10/24/Framework-of-ApacheFlink/</url>
    <content><![CDATA[<h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><h3 id="搭建Flink所需组件"><a href="#搭建Flink所需组件" class="headerlink" title="搭建Flink所需组件"></a>搭建Flink所需组件</h3>]]></content>
      <categories>
        <category>The Hadoop Ecosystem</category>
        <category>Learning Flink</category>
      </categories>
      <tags>
        <tag>Reading Books</tag>
        <tag>Bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda 架构</title>
    <url>/2020/10/29/Lambda-System-Construction/</url>
    <content><![CDATA[<h2 id="一-新范式"><a href="#一-新范式" class="headerlink" title="(一).新范式"></a>(一).新范式</h2><h3 id="传统数据库的不足"><a href="#传统数据库的不足" class="headerlink" title="传统数据库的不足"></a>传统数据库的不足</h3><ul>
<li><p>数据库更不上负载:解决方法-用队列扩展</p>
</li>
<li><p>数据库再次超载:解决方法-通过数据库进行分片扩展</p>
</li>
<li><p>处理容错问题</p>
</li>
<li><p>损坏问题</p>
<p><strong>系统必须是可以容忍人为错误的</strong></p>
</li>
</ul>
<h3 id="大数据系统应有的属性"><a href="#大数据系统应有的属性" class="headerlink" title="大数据系统应有的属性"></a>大数据系统应有的属性</h3><ul>
<li><p>鲁棒性和容错性</p>
</li>
<li><p>低延迟读取和更新</p>
</li>
<li><p>可扩展性</p>
</li>
<li><p>通用性</p>
</li>
<li><p>延展性(目标实现大规模迁移)</p>
</li>
<li><p>及席查询</p>
</li>
<li><p>最少维护</p>
</li>
<li><p>可调式性</p>
</li>
</ul>
<h3 id="Lambda架构模型"><a href="#Lambda架构模型" class="headerlink" title="Lambda架构模型"></a>Lambda架构模型</h3><h5 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h5><p><strong>数据系统不只是记录和重现信息 你掌握的信息是真实的,只是因为它存在<br>数据系统的通用表达式:</strong><br><strong>query = function(all data)</strong></p>
<h5 id="Lambda架构总体的函数"><a href="#Lambda架构总体的函数" class="headerlink" title="Lambda架构总体的函数"></a>Lambda架构总体的函数</h5><p><strong>系统抽象函数:</strong></p>
<p><strong>batch view = function (all data)</strong><br><strong>realtime view = function (realtime view(实时视图) ,new data)</strong><br><strong>query = function (batch view ,realtime view )</strong></p>
<h5 id="Lambda架构模型的说明"><a href="#Lambda架构模型的说明" class="headerlink" title="Lambda架构模型的说明"></a>Lambda架构模型的说明</h5><ul>
<li>批处理层:先查询预先计算查询函数(批处理视图)</li>
<li>速度层:速度层只查看最近的数据,而批处理层要立即查看所有数据,速度层做增量查询.而不是像批处理层那样重写计算</li>
<li>服务层:一个专门的分布式数据库,用于加载批处理视图,并且可以对它进行随机读取</li>
</ul>
<h5 id="示例应用-SuperWebAnalytics-com"><a href="#示例应用-SuperWebAnalytics-com" class="headerlink" title="示例应用:SuperWebAnalytics.com"></a>示例应用:SuperWebAnalytics.com</h5><h2 id="二-批处理层"><a href="#二-批处理层" class="headerlink" title="(二).批处理层"></a>(二).批处理层</h2><h3 id="数据的属性"><a href="#数据的属性" class="headerlink" title="数据的属性"></a>数据的属性</h3><h5 id="数据是原始的"><a href="#数据是原始的" class="headerlink" title="数据是原始的"></a>数据是原始的</h5><ul>
<li>非结构化的数据比规范化的数据更原始,更多的信息并不意味更原始的数据</li>
</ul>
<h5 id="数据是不可变的"><a href="#数据是不可变的" class="headerlink" title="数据是不可变的"></a>数据是不可变的</h5><ul>
<li>容忍人为错误是数据系统的基本属性,对于可变的数据模型,一个错误会导致数据的丢失.在数据库中值会被覆盖掉;而对于不可变的数据模式,如果人为的写入了坏数据,更早一些的数据单元仍然存在.修复数据系统知识删除损坏的数据单元</li>
<li>可变数据模式数据必须以某种方式被索引,相反,不可变数据模式不需要,这是巨大的简化</li>
</ul>
<h5 id="数据是永远真实的"><a href="#数据是永远真实的" class="headerlink" title="数据是永远真实的"></a>数据是永远真实的</h5><ul>
<li>删除数据不是对数据真实性的声明,相反,它是对数据价值的声明</li>
</ul>
<h3 id="基于事实的数据表示模型"><a href="#基于事实的数据表示模型" class="headerlink" title="基于事实的数据表示模型"></a>基于事实的数据表示模型</h3><h5 id="事实模型的特点"><a href="#事实模型的特点" class="headerlink" title="事实模型的特点"></a>事实模型的特点</h5><ul>
<li>将原始数据储存为原子事实-原子性(不能再细化成有意义的组件)</li>
<li>通过时间戳保证事实的不变性和永远正确性</li>
<li>确保每个事实是可区分的,这样查询过程可以区分重复</li>
</ul>
<h5 id="基于事实的模型的优势"><a href="#基于事实的模型的优势" class="headerlink" title="基于事实的模型的优势"></a>基于事实的模型的优势</h5><ul>
<li><p>任何时刻的历史消息都是可查询的</p>
</li>
<li><p>容忍人为错误(删除事实)</p>
</li>
<li><p>只需要处理部分信息</p>
</li>
<li><p>拥有规范和非规范形式的优点</p>
<p><strong>规范化-以结构化的方式存储数据-查询效率</strong></p>
<p><strong>非规范化-保证数据一致性</strong></p>
</li>
</ul>
<h3 id="批处理层的数据存储"><a href="#批处理层的数据存储" class="headerlink" title="批处理层的数据存储"></a>批处理层的数据存储</h3><h5 id="主数据集的存储需求"><a href="#主数据集的存储需求" class="headerlink" title="主数据集的存储需求"></a>主数据集的存储需求</h5><ul>
<li>写:<ul>
<li>高效追加数据:简单高效</li>
<li>可扩展的存储:TB或PB级别的数据,必须很容易扩展存储</li>
</ul>
</li>
<li>读:<ul>
<li>支持并行处理</li>
</ul>
</li>
<li>读写:<ul>
<li>可调优存储和处理成本</li>
<li>强制不变性</li>
</ul>
</li>
</ul>
<h5 id="分布式文件系统的存储需求"><a href="#分布式文件系统的存储需求" class="headerlink" title="分布式文件系统的存储需求"></a>分布式文件系统的存储需求</h5><p>主要矛盾:处理成本和存储成本</p>
<p>解决方案:分布式文件系统</p>
<h5 id="垂直分区-这种存储标准适用全架构的哪一部分的数据集"><a href="#垂直分区-这种存储标准适用全架构的哪一部分的数据集" class="headerlink" title="垂直分区(这种存储标准适用全架构的哪一部分的数据集)"></a>垂直分区(这种存储标准适用全架构的哪一部分的数据集)</h5><p>次要矛盾:查询效率和存储成本</p>
<p>解决什么问题:提高批处理查询效率</p>
<p>怎么实现:例如静态分区,动态分区</p>
<h3 id="批处理层"><a href="#批处理层" class="headerlink" title="批处理层"></a>批处理层</h3><h5 id="视图的标准"><a href="#视图的标准" class="headerlink" title="视图的标准"></a>视图的标准</h5><ul>
<li>批处理层上计算的一个简单策略;预先计算所以可能的查询,并将结果缓存在服务层中,但这种预先计算不能穷尽所有业务的可能性,对于给定的查询业务,要预先计算的是每一个单元</li>
</ul>
<h5 id="重新计算算法"><a href="#重新计算算法" class="headerlink" title="重新计算算法"></a>重新计算算法</h5><ol>
<li>性能:需要处理整个数据集的计算工作量</li>
<li>容忍人的错误:批处理视图不断被重建</li>
<li>通用性:在预先处理阶段解决了算法的复杂性,由此生成了简单的批处理视图和低延迟动态处理</li>
<li>总结:对于支持鲁棒性的数据处理系统是必不可少的</li>
</ol>
<h5 id="增量算法-适用什么场合或者要满足什么要求"><a href="#增量算法-适用什么场合或者要满足什么要求" class="headerlink" title="增量算法(适用什么场合或者要满足什么要求)"></a>增量算法(适用什么场合或者要满足什么要求)</h5><ol>
<li><p>性能:需要更少的计算资源但可能产生大得多的批处理视图</p>
</li>
<li><p>容忍人的错误:不容易修复批处理视图中的错误,修复是暂时的,可能要估算</p>
</li>
<li><p>通用性:需要特殊定制.可能将复杂性转移到动态查询的处理中</p>
</li>
<li><p>总结:提高系统效率,但只是重新计算算法的补充</p>
</li>
</ol>
<h5 id="一种大数据计算的范式-MapReduce"><a href="#一种大数据计算的范式-MapReduce" class="headerlink" title="一种大数据计算的范式:MapReduce"></a>一种大数据计算的范式:MapReduce</h5><ul>
<li>优:可扩展性 容错性 通用性</li>
<li>缺:多步计算 join连接要手动 逻辑和物理执行耦合</li>
</ul>
<h5 id="一种关于批处理计算的高级思维方式-管道图"><a href="#一种关于批处理计算的高级思维方式-管道图" class="headerlink" title="一种关于批处理计算的高级思维方式:管道图"></a>一种关于批处理计算的高级思维方式:管道图</h5><h3 id="批处理层示例与实现-业务处理"><a href="#批处理层示例与实现-业务处理" class="headerlink" title="批处理层示例与实现(业务处理)"></a>批处理层示例与实现(业务处理)</h3><h5 id="URL规范化"><a href="#URL规范化" class="headerlink" title="URL规范化"></a>URL规范化</h5><h5 id="用户标识符规范化-迭代图算法"><a href="#用户标识符规范化-迭代图算法" class="headerlink" title="用户标识符规范化(迭代图算法)"></a>用户标识符规范化(迭代图算法)</h5><ul>
<li>等效边的处理</li>
</ul>
<h5 id="页面浏览去重"><a href="#页面浏览去重" class="headerlink" title="页面浏览去重"></a>页面浏览去重</h5><p>改日再写…………</p>
<h2 id="三-服务层"><a href="#三-服务层" class="headerlink" title="(三).服务层"></a>(三).服务层</h2><h3 id="服务层概述"><a href="#服务层概述" class="headerlink" title="服务层概述"></a>服务层概述</h3><h5 id="服务层的性能指标"><a href="#服务层的性能指标" class="headerlink" title="服务层的性能指标"></a>服务层的性能指标</h5><p>起源:</p>
<ul>
<li>层的索引以完全分布式的方式被创建、加载和 服务</li>
</ul>
<p>指标:</p>
<ul>
<li>延迟:响应单个查询所需 的时间</li>
<li>吞吐量:给定时间内可以服务的查询数量</li>
</ul>
<p>性能的优化:</p>
<ul>
<li>的索引促进扫描并限制磁盘寻道,从而改善了延迟和吞吐量</li>
</ul>
<h5 id="一致性问题的描述"><a href="#一致性问题的描述" class="headerlink" title="一致性问题的描述"></a>一致性问题的描述</h5><p>解决方案:lambda架构中主数据集和服务层之间是分离的,解决”一个字段的不同副本数据不一致问题”等,重新开始计算服务层</p>
<h5 id="服务层数据库的需求"><a href="#服务层数据库的需求" class="headerlink" title="服务层数据库的需求"></a>服务层数据库的需求</h5><ul>
<li><p>写-服务层所用的批处理视图是从头开始产生的,当视图的一个新的版本可以用时,旧版本的视图必须能够完全用新的视图替换</p>
</li>
<li><p>展性-服务层数据库必须能够处理任意大小的视图</p>
</li>
<li><p>读取-尤对小部分视图的随机读取</p>
</li>
<li><p>性-分布式架构必须要容忍机器的故障</p>
</li>
</ul>
<h5 id="设计SuperWebAnalytics-com的服务层"><a href="#设计SuperWebAnalytics-com的服务层" class="headerlink" title="设计SuperWebAnalytics.com的服务层"></a>设计SuperWebAnalytics.com的服务层</h5><p>ElephantDB数据库</p>
<h5 id="LAMBDA架构服务层的基本概念"><a href="#LAMBDA架构服务层的基本概念" class="headerlink" title="LAMBDA架构服务层的基本概念"></a>LAMBDA架构服务层的基本概念</h5><ul>
<li><p>视图来优化延迟和吞吐量的能力</p>
</li>
<li><p>持随机写的简单形式</p>
</li>
<li><p>处理层储存规范化数据并在服务层储存非规范化数据的能力</p>
</li>
<li><p>层固有的容错和纠错性.因为可以从主数据集重新计算</p>
</li>
</ul>
<h2 id="四-速度层"><a href="#四-速度层" class="headerlink" title="(四).速度层"></a>(四).速度层</h2><h3 id="实时视图"><a href="#实时视图" class="headerlink" title="实时视图"></a>实时视图</h3><h5 id="存储实时视图"><a href="#存储实时视图" class="headerlink" title="存储实时视图"></a>存储实时视图</h5><ul>
<li>随机读:实时视图应该支持快速回应查询,这意味着它所包含的数据必须被索引</li>
<li>随机写:为了支持增量算法,必须低延迟地修改实时视图</li>
<li>可扩展性</li>
<li>容错性</li>
</ul>
<h5 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h5><ul>
<li>所有的数据最终都将表示在批处理层和服务层视图中,任何在速度层得到的近似值会被不断修正,这意味着任何近似值知识暂时的,即查询最终展示了准确性</li>
</ul>
<h5 id="增量算法的挑战"><a href="#增量算法的挑战" class="headerlink" title="增量算法的挑战"></a>增量算法的挑战</h5><ul>
<li><p><strong>CAP定理的正确表述:当分布式数据系统被分区时,它可以是一致性的或者可用性的,但不能两者兼而有之.也就是说,如果选择了一致性,那么查询就会收到错误结果而不是正确答案:如果选择可用性,那么在网络分区间,读操作可能返回过时的数据,在高可用性系统中,最好的一致性属性是最终一致性</strong></p>
</li>
<li><p><strong>CAP定理</strong></p>
</li>
</ul>
<h3 id="队列和流"><a href="#队列和流" class="headerlink" title="队列和流"></a>队列和流</h3><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><ul>
<li><p>单消费者队列</p>
<ul>
<li><strong>设计思想:从队列中读取一个事件时,该事件不会立即被删除,相反,get方法返回的记录包括一个标识符,稍后用它来确认处理事件成功还是失败.只有一个事件被确认成功删除,它才会被从队列中删除,如果事件处理失败或者超时,队列服务器将允许另一个服务器通过一个单独的get方法调用相同的事件.因此使用该方法,一个事件可能被处理多次,但是每个事件至少被处理一次是毋庸置疑的</strong></li>
<li><strong>缺陷:消除了独立应用程序之间的任何隔离性</strong></li>
<li><strong>完善:为每个消费者应用程序维护一个单独的队列,但是这种方法的实现大大增加服务器上的负载</strong></li>
<li><strong>启发:队列系统所需的属性</strong></li>
</ul>
</li>
<li><p>多消费者队列</p>
<ul>
<li>Apache Kafka</li>
</ul>
</li>
</ul>
<h5 id="流处理"><a href="#流处理" class="headerlink" title="流处理"></a>流处理</h5><ul>
<li><p>storm</p>
</li>
<li><p>spark</p>
</li>
<li><p>flink</p>
</li>
</ul>
<h3 id="微批量处理"><a href="#微批量处理" class="headerlink" title="微批量处理"></a>微批量处理</h3><h5 id="实现有且仅有一次的语义"><a href="#实现有且仅有一次的语义" class="headerlink" title="实现有且仅有一次的语义"></a>实现有且仅有一次的语义</h5><h5 id="微批量流处理"><a href="#微批量流处理" class="headerlink" title="微批量流处理"></a>微批量流处理</h5><p>每个批次被有序处理,并且每个批次都有唯一的ID,该ID每次回放总是一样的</p>
<h5 id="微批量流处理的核心概念"><a href="#微批量流处理的核心概念" class="headerlink" title="微批量流处理的核心概念"></a>微批量流处理的核心概念</h5><ul>
<li>本地批量计算</li>
<li>有状态的计算</li>
</ul>
<h2 id="五-深入lambda架构"><a href="#五-深入lambda架构" class="headerlink" title="(五).深入lambda架构"></a>(五).深入lambda架构</h2><h3 id="定义数据系统"><a href="#定义数据系统" class="headerlink" title="定义数据系统"></a>定义数据系统</h3><p><strong>查询要关注的属性</strong></p>
<ul>
<li><p>延迟:运行一个查询的书剑</p>
</li>
<li><p>时效性:最新的查询如何</p>
</li>
<li><p>准确性:在许多情况下,为了使查询更具有较好的性能和可扩展性,必须在查询的实现中采用近似值</p>
</li>
</ul>
<p><strong>延迟性和及时性的描述</strong></p>
<ul>
<li><p>CAP定理表明:在网络分区的情况下,一个系统要么是一致性(查询考虑到所有以前写入的数据),要么是可用的(目前查询可以被回应)</p>
</li>
<li><p>一致性只是及时性的一种形式,可用性只意味查询的延迟是有界的.最终一致性的系统选择延迟而不是及时性(查询总是被回应,但可能不会考虑所有先前失败的情况下的数据)</p>
</li>
</ul>
<p><strong>数据系统的基本模型</strong></p>
<p>为什么如此以及怎样:允许人为错误 易变性   唯一的办法是让核心数据保持不变</p>
<ul>
<li><p>包含不断增长 的数据集合的主数据集</p>
</li>
<li><p>作为函数的查询将整个主数据集作为输入</p>
</li>
</ul>
<h3 id="批处理层和服务层"><a href="#批处理层和服务层" class="headerlink" title="批处理层和服务层"></a>批处理层和服务层</h3><p><strong>增量的批处理</strong></p>
<p>局限性:原始数据可能是混乱的</p>
<p>解决的方案:<strong>部分重新计算</strong>:</p>
<ul>
<li>部分重新计算花费时间比基于完全重新计算的方法快</li>
<li>给予一定的能力来纠正人为错误</li>
</ul>
<h3 id="速度层"><a href="#速度层" class="headerlink" title="速度层"></a>速度层</h3><p>设计的主旨:倾向于性能使用增量算法而不是重新计算方法</p>
<h3 id="查询层"><a href="#查询层" class="headerlink" title="查询层"></a>查询层</h3><p>目的:负责利用批处理层和实时视图来响应查询</p>
<h2 id="六-重要的问题"><a href="#六-重要的问题" class="headerlink" title="(六)重要的问题"></a>(六)重要的问题</h2><p>1.等效边怎么处理(用户标识符规范化)</p>
<p>2.垂直分区:假设按照星期来分区?但是我要查询男女???或者其他的需求,我要访问多余的数据,</p>
<p>3.怎么理解批处理层的数据规划化?是否有索引</p>
<p>4.假设多个人同时修改处理一块数据,怎么保证正确性,如果加锁,影响性能怎么解决?</p>
<p>5.hbase是怎么删除数据的?打标签,怎么打?</p>
<p>6.hdfs上的数据怎么实现修改的???</p>
<p>7.hbase是按照rowkey来存储的,我的问题是我要查询最近两个星期的数据,hbase的存储方式是不满足我的要求的,问题是,我怎么间接地访问到两个星期的数据???—-查了一下hbase能查,这不是浪费资源吗</p>
<p>8.hdfs的重名问题</p>
<p>9.视图和展示数据以及最终的查询结果之间的标准是什么,换句话说怎么理解视图9</p>
<p>10.批处理层 服务层 速度层 各自处理什么样的数据,生成什么样的数据,之间是如何沟通的,它们的界限???</p>
<p>11.主数据集是如何更新数据的???</p>
]]></content>
      <categories>
        <category>The Hadoop Ecosystem</category>
      </categories>
      <tags>
        <tag>Reading Books</tag>
        <tag>Bigdata</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统面试题摘要</title>
    <url>/2020/11/12/Operating-System/</url>
    <content><![CDATA[<h2 id="操作系统基础"><a href="#操作系统基础" class="headerlink" title="操作系统基础"></a>操作系统基础</h2><h4 id="1-什么是操作系统"><a href="#1-什么是操作系统" class="headerlink" title="1.什么是操作系统"></a>1.什么是操作系统</h4><ul>
<li><p>操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序，是计算机的基石</p>
</li>
<li><p>操作系统屏蔽了软件层的复杂性</p>
</li>
<li><p>操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理,内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性</p>
</li>
</ul>
<h4 id="2-系统调用"><a href="#2-系统调用" class="headerlink" title="2.系统调用"></a>2.系统调用</h4><h6 id="根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别："><a href="#根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别：" class="headerlink" title="根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别："></a>根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别：</h6><ol>
<li>用户态(user mode) : 用户态运行的进程或可以直接读取用户程序的数据。</li>
<li>系统态(kernel mode):可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制。</li>
</ol>
<h6 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h6><ul>
<li>我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成</li>
</ul>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h4 id="线程间的同步的方式有哪些呢"><a href="#线程间的同步的方式有哪些呢" class="headerlink" title="线程间的同步的方式有哪些呢?"></a>线程间的同步的方式有哪些呢?</h4><ol>
<li><p>**互斥量(Mutex)**：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。</p>
</li>
<li><p><strong>信号量(Semphares)</strong> ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量</p>
</li>
<li><p><strong>事件(Event)</strong> :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作</p>
</li>
</ol>
<h4 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h4><h4 id="操作系统中进程的调度算法"><a href="#操作系统中进程的调度算法" class="headerlink" title="操作系统中进程的调度算法"></a>操作系统中进程的调度算法</h4><ul>
<li><strong>先到先服务(FCFS)调度算法</strong> : 从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>短作业优先(SJF)的调度算法</strong> : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li>
<li><strong>时间片轮转调度算法</strong> : 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称 RR(Round robin)调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li>
<li><strong>多级反馈队列调度算法</strong> ：前面介绍的几种进程调度的算法都有一定的局限性。如<strong>短进程优先的调度算法，仅照顾了短进程而忽略了长进程</strong> 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</li>
<li><strong>优先级调度</strong> ： 为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li>
</ul>
<h2 id="操作系统内存管理系统"><a href="#操作系统内存管理系统" class="headerlink" title="操作系统内存管理系统"></a>操作系统内存管理系统</h2><h4 id="CPU-寻址了解吗-为什么需要虚拟地址空间"><a href="#CPU-寻址了解吗-为什么需要虚拟地址空间" class="headerlink" title="CPU 寻址了解吗?为什么需要虚拟地址空间?"></a>CPU 寻址了解吗?为什么需要虚拟地址空间?</h4><ul>
<li>现代处理器使用的是一种称为 虚拟寻址(Virtual Addressing)*的寻址方式。使用虚拟寻址，CPU 需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存。 实际上完成虚拟地址转换为物理地址转换的硬件是 CPU 中含有一个被称为 内存管理单元</li>
<li>如果直接把物理地址暴露出来的话会带来严重问题，比如可能对操作系统造成伤害以及给同时运行多个程序造成困难</li>
<li></li>
</ul>
<h4 id="缓存-内存-虚拟内存"><a href="#缓存-内存-虚拟内存" class="headerlink" title="缓存 内存 虚拟内存"></a>缓存 内存 虚拟内存</h4><ul>
<li> 缓存是为了解决CPU速度和内存速度的速度差异问题 内存中被CPU访问最频繁的数据和指令被复制入CPU中的缓存</li>
<li> 虚拟内存是WINDOWS操作系统用来管理内存的一种方法 虚拟内存说穿了就是把内存中的信息分出去一部分存在硬盘上 这样从表面上看就扩大了内存容量</li>
<li> 缓存是一种硬件，是CPU的一部分；而虚拟内存并不是一种硬件，而是存在于硬盘上的一个文件，是根据WINDOWS的要求生成的（二者中的信息都是随时变化的） </li>
<li> 缓存的目的是加快系统的速度，而虚拟内存技术是为了使更多的程序能够在有限的内存中运行</li>
</ul>
<p>未完成</p>
]]></content>
      <categories>
        <category>Computer engineering</category>
      </categories>
      <tags>
        <tag>Reading Books</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala容器高级操作</title>
    <url>/2020/10/26/Scala-ContainerOperation/</url>
    <content><![CDATA[<h4 id="程序流程控制的特殊语法"><a href="#程序流程控制的特殊语法" class="headerlink" title="程序流程控制的特殊语法"></a>程序流程控制的特殊语法</h4><h4 id="scala容器的增删改查的注意事项"><a href="#scala容器的增删改查的注意事项" class="headerlink" title="scala容器的增删改查的注意事项"></a>scala容器的增删改查的注意事项</h4><h4 id="容器高级操作案例"><a href="#容器高级操作案例" class="headerlink" title="容器高级操作案例"></a>容器高级操作案例</h4><h4 id="apply-unapply-sequnapply"><a href="#apply-unapply-sequnapply" class="headerlink" title="apply  unapply   sequnapply"></a>apply  unapply   sequnapply</h4><p>//scala容器增删改查</p>
<p>//scala高阶函数与容器例子</p>
<p>//偏函数,特质叠加,隐式转换,模式匹配的应用</p>
<p>//快学scala中案例的再次回顾</p>
<p>//apply  unapply sequnapply的回顾</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如何用reduceLeft得到数组中的最大元素?</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">67</span>, <span class="number">45</span>, <span class="number">7889</span>)</span><br><span class="line">    println(array.reduceLeft(rmax))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//使用泛型增加复用性</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rmax</span></span>[<span class="type">S</span>, <span class="type">T</span>](num: <span class="type">S</span>, num2: <span class="type">T</span>) = &#123;</span><br><span class="line">    <span class="keyword">if</span> (num.toString.toInt.isInstanceOf[<span class="type">Int</span>] &amp;&amp; num2.toString.toInt.isInstanceOf[<span class="type">Int</span>]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num.toString.toInt &lt; num2.toString.toInt)  num2    <span class="keyword">else</span>  num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象控制的简单案例-实现if</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">           <span class="keyword">var</span> number = <span class="number">10</span></span><br><span class="line">           myif(number &gt; <span class="number">4</span>)&#123;</span><br><span class="line">                 number-= <span class="number">1</span></span><br><span class="line">                 println(number)</span><br><span class="line">           &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myif</span></span>(f: =&gt; <span class="type">Boolean</span>)(f1: =&gt; <span class="type">Unit</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">          <span class="keyword">if</span>(f)&#123;</span><br><span class="line">              f1</span><br><span class="line">              myif(f)(f1)</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Wordcount案例(foldLeft方法)</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> words = <span class="string">&quot;AAAABDDDDBBBWWWJJCCCCJTTEEE&quot;</span></span><br><span class="line">    <span class="comment">//使用reducefold方法,分别使用不可变,可变集合</span></span><br><span class="line">    <span class="keyword">val</span> value = words.foldLeft(mutable.<span class="type">Map</span>[<span class="type">Char</span>, <span class="type">Int</span>]())(myreducefold)</span><br><span class="line">    <span class="keyword">val</span> value1 = words.foldLeft(<span class="type">Map</span>[<span class="type">Char</span>, <span class="type">Int</span>]())(myReducefold)</span><br><span class="line">    println(value)</span><br><span class="line">    println(value1)</span><br><span class="line">    <span class="comment">// println(mumap)</span></span><br><span class="line">    <span class="comment">//HashMap(A -&gt; 4, B -&gt; 4, C -&gt; 4, D -&gt; 4, T -&gt; 2, E -&gt; 3, W -&gt; 3, J -&gt; 3)</span></span><br><span class="line">    <span class="comment">//HashMap(E -&gt; 3, T -&gt; 2, J -&gt; 3, A -&gt; 4, B -&gt; 4, C -&gt; 4, W -&gt; 3, D -&gt; 4)</span></span><br><span class="line">    <span class="comment">//HashMap()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方法一</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myreducefold</span></span>(map: mutable.<span class="type">Map</span>[<span class="type">Char</span>, <span class="type">Int</span>], char: <span class="type">Char</span>) = &#123;</span><br><span class="line">    map.get(char) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Some</span>(value) =&gt; map + (char -&gt; (value.toInt + <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">case</span> <span class="type">None</span> =&gt; map + (char -&gt; <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方法二</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myReducefold</span></span>(map: <span class="type">Map</span>[<span class="type">Char</span>, <span class="type">Int</span>], char: <span class="type">Char</span>) = &#123;</span><br><span class="line">    map + (char -&gt; (map.getOrElse(char, <span class="number">0</span>) + <span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用Scala实现一个方法，使得返回数组中，分别等于num，大于num，小于num的元素的个数,getNum（Array（1,2,3,4,5,6），2）结果为（1,1,4）</span><br><span class="line">  object Test4 &#123;</span><br><span class="line">  def main(args: Array[String]): Unit &#x3D; &#123;</span><br><span class="line">    val array &#x3D; Array[Int](1, 2, 3, 4, 5, 6)</span><br><span class="line">    &#x2F;&#x2F;考虑模式匹配</span><br><span class="line">    array.groupBy &#123;</span><br><span class="line">      case x if x &lt; 2 &#x3D;&gt; &quot;&lt;2&quot;</span><br><span class="line">      case y if y &#x3D;&#x3D; 2 &#x3D;&gt; &quot;&#x3D;2&quot;</span><br><span class="line">      case z if z &gt; 2 &#x3D;&gt; &quot;&gt;2&quot;</span><br><span class="line">    &#125;.map(data &#x3D;&gt; (data._1, data._2.size)).foreach(println)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;考虑foldleft</span><br><span class="line">    val a &#x3D; 0</span><br><span class="line">    val b &#x3D; 0</span><br><span class="line">    val c &#x3D; 0</span><br><span class="line">    array.foldLeft(a, b, c)((x, y) &#x3D;&gt; &#123;</span><br><span class="line">      (if (y &lt; 2) &#123;</span><br><span class="line">        (x._1 + 1)</span><br><span class="line">      &#125; else x._1,</span><br><span class="line">        if (y &#x3D;&#x3D; 2) &#123;</span><br><span class="line">          (x._2 + 1)</span><br><span class="line">        &#125; else x._2,</span><br><span class="line">        if (y &gt; 2) &#123;</span><br><span class="line">          (x._3 + 1)</span><br><span class="line">        &#125; else x._3)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F;考虑aggregate聚合方法</span><br><span class="line">    var result &#x3D; array.aggregate(a, b, c)((x, y) &#x3D;&gt; &#123;</span><br><span class="line">      (if (y &gt; 2) &#123;</span><br><span class="line">        x._1 + 1</span><br><span class="line">      &#125; else x._1,</span><br><span class="line">        if (y &#x3D;&#x3D; 2) &#123;</span><br><span class="line">          x._2 + 1</span><br><span class="line">        &#125; else x._2,</span><br><span class="line">        if (y &lt; 2) &#123;</span><br><span class="line">          x._3 + 1</span><br><span class="line">        &#125; else x._3)</span><br><span class="line">    &#125;, null)</span><br><span class="line">    println((result._1, result._2, result._3))</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;考虑过滤</span><br><span class="line">    println((array.count(_ &gt; 2), array.count(_ &lt; 2), array.count(_ &#x3D;&#x3D; 2)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>Summary of knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>DP</title>
    <url>/2020/11/17/Dynamic-Planning/</url>
    <content><![CDATA[<h4 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *对于方程的描述</span></span><br><span class="line"><span class="comment"> *1.当物品或者容量某一项为空,装入的最大价值都为0</span></span><br><span class="line"><span class="comment"> *2.当遍历到第i类商品的重量大于给出的容量时,是无法装入第i类商品,沿用上一个过程的装入策略即:w[i] &gt; j v[i][j] = v[i-1] [j]</span></span><br><span class="line"><span class="comment"> *3.当遍历到第i类商品的重量是小于给出的容量时,就可以装入第i类商品,理解v[i-1][j-w[i]]</span></span><br><span class="line"><span class="comment"> *装入前i-1类商品到剩余的空间(容量)--&gt;j-wi,-&gt;解释是在剩余空间下i-1中类型商品情况下的选择策略 max&#123;&#125;理解为比较与上一个策略的容 </span></span><br><span class="line"><span class="comment"> *量,要此次策略要采取的..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProgramming</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*01背包问题</span></span><br><span class="line"><span class="comment">     * 分别有三个物品 要存放到背包(重量为4)中 计算最大的价值</span></span><br><span class="line"><span class="comment">     * 重量:1 4 3</span></span><br><span class="line"><span class="comment">     * 价值:1500 3000 2000</span></span><br><span class="line"><span class="comment">     * 动态规划例题</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] hight = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] value = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1500</span>, <span class="number">3000</span>, <span class="number">2000</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">4</span>;<span class="comment">//背包的容量</span></span><br><span class="line">        <span class="keyword">int</span> m = value.length;<span class="comment">//物品的个数</span></span><br><span class="line">        <span class="comment">//设置一个二维数组表示总价值 加一表示 物品或者容量为0情况</span></span><br><span class="line">        <span class="keyword">int</span>[][] val = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.length; i++) &#123;</span><br><span class="line">            val[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val[<span class="number">0</span>].length; i++) &#123;</span><br><span class="line">            val[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; val.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; val[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hight[i - <span class="number">1</span>] &gt; j) &#123;</span><br><span class="line">                    <span class="comment">//采用上一个的策略</span></span><br><span class="line">                    val[i][j] = val[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//对该函数的说明   val[i-1][j-hight[i]] 第i个商品的剩余容量</span></span><br><span class="line">                    val[i][j] = Math.max(val[i - <span class="number">1</span>][j], value[i - <span class="number">1</span>] + val[i - <span class="number">1</span>][j - hight[i - <span class="number">1</span>]]);</span><br><span class="line">                    <span class="comment">//value[i] 是必定能取到的  后一个[j-hight[i]]剩余的空间,后一个的描述是,只有</span></span><br><span class="line">                    <span class="comment">//[j-hight[i]]空间 遍历到val[i]种类型的选择策略</span></span><br><span class="line">                    <span class="comment">//商品的类型是不断增加的</span></span><br><span class="line">                    <span class="comment">//原来函数的标准式:val[i][j] =  Math.max(val[i-1][j] , value[i] + val[i-1][j-hight[i]])</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; val[<span class="number">0</span>].length; i1++) &#123;</span><br><span class="line">                System.out.print(Integer.toString(val[i][i1]) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProgramming1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment">     * Description:</span></span><br><span class="line"><span class="comment">     * User: tongyongtao</span></span><br><span class="line"><span class="comment">     * Date: 2020-10-12</span></span><br><span class="line"><span class="comment">     * Time: 19:16</span></span><br><span class="line"><span class="comment">     * 重量:1 4 3</span></span><br><span class="line"><span class="comment">     * 价值:1500 3000 2000</span></span><br><span class="line"><span class="comment">     * 优化求出最后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存储每种商品的重量</span></span><br><span class="line">        <span class="keyword">int</span>[] weight = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//存储每种商品的价格</span></span><br><span class="line">        <span class="keyword">int</span>[] value = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1500</span>, <span class="number">3000</span>, <span class="number">2000</span>&#125;;</span><br><span class="line">        <span class="comment">//背包的容量是4</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">//构建一个二维数组用来表示每次选择的价值</span></span><br><span class="line">        <span class="keyword">int</span>[][] val = <span class="keyword">new</span> <span class="keyword">int</span>[weight.length + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化val[][0] val[0][];</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.length; i++) &#123;</span><br><span class="line">            val[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val[<span class="number">0</span>].length; i++) &#123;</span><br><span class="line">            val[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//由于第一行和第一列都进行的赋值,所以从1开始遍历</span></span><br><span class="line">        <span class="comment">//假设第i个商品的重量是大于本次的容量的则采取上一次的策略</span></span><br><span class="line">        <span class="comment">//如果是小于本次容量的则进行比较   //上一次的策略和本次可以容纳的策略</span></span><br><span class="line">        <span class="comment">//构建方程 max&#123;val[i-1][j] , value[i] + val[i-1][j - weight[i]] &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//建一个数组来记录信息</span></span><br><span class="line">        <span class="keyword">int</span>[][] path = <span class="keyword">new</span> <span class="keyword">int</span>[value.length + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; val.length; i++) &#123;</span><br><span class="line">            <span class="comment">//容量每次递增</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; val[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="comment">//本次商品种类的重量是大于本次的容量的,选择的策略是上一次的</span></span><br><span class="line">                <span class="comment">//此处索引从1开始的</span></span><br><span class="line">                <span class="keyword">if</span> (weight[i - <span class="number">1</span>] &gt; j) &#123;</span><br><span class="line">                    val[i][j] = val[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                  <span class="comment">/* else &#123;</span></span><br><span class="line"><span class="comment">                        //是可以采用本次商品的,策略是与上一次进行比较</span></span><br><span class="line"><span class="comment">                       val[i][j] = Math.max(val[i-1][j] , value[i-1] +val[i-1][j -weight[i-1]] );</span></span><br><span class="line"><span class="comment">                   &#125;*/</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (val[i - <span class="number">1</span>][j] &lt; value[i - <span class="number">1</span>] + val[i - <span class="number">1</span>][j - weight[i - <span class="number">1</span>]]) &#123;</span><br><span class="line">                    val[i][j] = value[i - <span class="number">1</span>] + val[i - <span class="number">1</span>][j - weight[i - <span class="number">1</span>]];</span><br><span class="line">                    path[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    val[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; val[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                System.out.print(val[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从上往下遍历获取最后一次的背包存储情况</span></span><br><span class="line">        <span class="keyword">int</span> i = path.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = path[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//索引从一开始</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d放入背包&quot;</span>, i);</span><br><span class="line">                <span class="comment">//背包的容量被占据</span></span><br><span class="line">                j -= weight[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="斐波那契问题"><a href="#斐波那契问题" class="headerlink" title="斐波那契问题"></a>斐波那契问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(fibonacci(<span class="number">12</span>));</span><br><span class="line">        System.out.println(fibonacci1(<span class="number">12</span>));</span><br><span class="line">        System.out.println(fibonacci2(<span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归实现</span></span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span> || number == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fibonacci(number - <span class="number">1</span>) + fibonacci(number - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态规划1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacci1</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//考虑建立一个数组存放所有的状态</span></span><br><span class="line">        <span class="comment">//注意容量和索引的不同</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[number];</span><br><span class="line">        <span class="comment">//初始化0 ,1</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[number-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态规划,考虑压缩</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacci2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两个变量接收遍历的值</span></span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= number; i++) &#123;</span><br><span class="line">              <span class="keyword">int</span> tmp = first + second;</span><br><span class="line">              first = second;</span><br><span class="line">              second = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="爬楼梯问题"><a href="#爬楼梯问题" class="headerlink" title="爬楼梯问题"></a>爬楼梯问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClimbStairs</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment">     * Description:</span></span><br><span class="line"><span class="comment">     * User: tongyongtao</span></span><br><span class="line"><span class="comment">     * Date: 2020-10-11</span></span><br><span class="line"><span class="comment">     * Time: 20:27</span></span><br><span class="line"><span class="comment">     * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</span></span><br><span class="line"><span class="comment">     * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span></span><br><span class="line"><span class="comment">     * f(x)=f(x−1)+f(x−2)</span></span><br><span class="line"><span class="comment">     * 动态规划和递归法的区别: 自下而上 自上而下</span></span><br><span class="line"><span class="comment">     * 注意滚动数组的应用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        climbStairs(<span class="number">12</span>);</span><br><span class="line">        System.out.println(climbStairs1(<span class="number">12</span>));</span><br><span class="line">        System.out.println(climbStairs2(<span class="number">12</span>));</span><br><span class="line">        System.out.println(climbStairs3(<span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//滚动数组方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//f(0)=1</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> q = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">            r = p + q;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态规划算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dp的优化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//tmp只是一个临时变量,用来存储cur的值,然后赋值给prev</span></span><br><span class="line">            <span class="keyword">int</span> tmp = cur;</span><br><span class="line">            cur = prev + cur;</span><br><span class="line">            prev = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">climbStairs3</span><span class="params">(<span class="keyword">int</span> ints)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ints &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ints;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> climbStairs3(ints - <span class="number">1</span>) + climbStairs3(ints - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="买卖股票的时机I"><a href="#买卖股票的时机I" class="headerlink" title="买卖股票的时机I"></a>买卖股票的时机I</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-13</span></span><br><span class="line"><span class="comment"> * Time: 20:25</span></span><br><span class="line"><span class="comment"> * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</span></span><br><span class="line"><span class="comment"> * 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</span></span><br><span class="line"><span class="comment"> * 注意：你不能在买入股票前卖出股票。</span></span><br><span class="line"><span class="comment"> * 例如: [7,1,5,3,6,4] 输出是5;</span></span><br><span class="line"><span class="comment"> * 说明过程:</span></span><br><span class="line"><span class="comment"> * 7 1 5 3 6 4</span></span><br><span class="line"><span class="comment"> * 0 0 4 4 5 5</span></span><br><span class="line"><span class="comment"> * -7 -1 -1 -1 -1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxProfit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(maxProfit1(ints));</span><br><span class="line">        System.out.println(maxProfit2(ints));</span><br><span class="line">        System.out.println(maxProfit3(ints));</span><br><span class="line">        System.out.println(maxProfit4(ints));</span><br><span class="line">        System.out.println(maxProfit5(ints));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一 暴力匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit1</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; prices.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = prices[j] - prices[i];</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; maxProfit) maxProfit = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二 获取最小值和与最大值的差值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minProfit = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxProfit = <span class="number">0</span>; <span class="comment">//最大的差值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; minProfit) minProfit = prices[i];  <span class="comment">//获取最小值</span></span><br><span class="line">            <span class="keyword">if</span> (prices[i] - minProfit &gt; maxProfit) maxProfit = prices[i] - minProfit;<span class="comment">//获取最大的正差值,先买后卖原则</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxProfit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法三 比较简易的动态规划</span></span><br><span class="line">    <span class="comment">//构建方程 max = &#123;f(x),f(x-1)&#125;//f(x-1)是上一次的策略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit3</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//最小的值</span></span><br><span class="line">        <span class="keyword">int</span> min = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//最大的差值</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (prices[i] &gt; min) &#123;</span><br><span class="line">                max = Math.max(max, prices[i] - min);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//因为这里 prices[i]是小于min的 替换</span></span><br><span class="line">                min = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法四 较为复杂的动态规划</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit4</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//说明:构建两个数组 sell 和 buy</span></span><br><span class="line">        <span class="comment">//对sell的说明:基于上一次策略 如果在本次策略买入会盈利的多少</span></span><br><span class="line">        <span class="comment">//对buy的说明基于本次策略,买入盈利的多少</span></span><br><span class="line">        <span class="keyword">int</span>[] sell = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">        <span class="keyword">int</span>[] buy = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">        <span class="comment">//初始化 sell buy</span></span><br><span class="line">        sell[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        buy[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            sell[i] = Math.max(sell[i - <span class="number">1</span>], buy[i - <span class="number">1</span>] + prices[i]);</span><br><span class="line">            buy[i] = Math.max(buy[i - <span class="number">1</span>], -prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每次选择的策略是基于上一次的选择策略,如果在比较之后是亏损的,则结果是继承的,</span></span><br><span class="line">        <span class="comment">//sell的原则是 与上一次sell的收益相比 本次卖出的收益与上次买入股票价格的差值(buy的值)</span></span><br><span class="line">        <span class="comment">//buy 的原则是 与上一次策略(股票价格的差值)</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(sell[prices.length - <span class="number">1</span>], buy[prices.length - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法五 对方法四的优化 滚动法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit5</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp1 = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">//sell</span></span><br><span class="line">            dp = Math.max(dp, dp1 + prices[i]);</span><br><span class="line">            <span class="comment">//buy</span></span><br><span class="line">            dp1 = Math.max(dp1,-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp,dp1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="买卖股票的时机II"><a href="#买卖股票的时机II" class="headerlink" title="买卖股票的时机II"></a>买卖股票的时机II</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-19</span></span><br><span class="line"><span class="comment"> * Time: 20:04</span></span><br><span class="line"><span class="comment"> * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</span></span><br><span class="line"><span class="comment"> * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</span></span><br><span class="line"><span class="comment"> * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxProfit2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">1</span> | prices.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置两个中间变量接收区域最大最小值</span></span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            tmp = prices[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; prices[i - <span class="number">1</span>] &amp;&amp; tmp &lt; prices[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                min = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; prices[i - <span class="number">1</span>] &amp;&amp; tmp &gt; prices[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                max = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            num += max - min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//特例递增 和 递减</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一次遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit1</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">//只要小于就买,否则不买</span></span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; prices[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                sum += prices[i + <span class="number">1</span>] - prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//峰谷法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要获取峰和谷</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[i] &gt;= prices[i + <span class="number">1</span>])</span><br><span class="line">                i++;</span><br><span class="line">            min = prices[i];</span><br><span class="line">            <span class="comment">//获取区域最大</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; prices.length - <span class="number">1</span> &amp;&amp; prices[i] &lt;= prices[i + <span class="number">1</span>])</span><br><span class="line">                i++;</span><br><span class="line">            max = prices[i];</span><br><span class="line">            sum += max - min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//0表示持有现金 1表示持有股票</span></span><br><span class="line">    <span class="comment">//定义一个二维数组</span></span><br><span class="line">    <span class="comment">// int[][] dp = new int[][]; 第一项表示收益  第二项表示状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit3</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对初始状态的定义</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">//是否持现金要看当前现金 和股票卖出去的收益比值</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意  new int[prices.length][2];  dp[prices.length-1][0];数的区别....经常搞错</span></span><br><span class="line">        <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同样可使用两个数组 或者滚动数组方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit4</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义持有现金和股票</span></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> cash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> stock = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> preCash = cash;</span><br><span class="line">        <span class="keyword">int</span> preStock = stock;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            cash = Math.max(preCash, preStock + prices[i]);</span><br><span class="line">            stock = Math.max(stock, preCash - prices[i]);</span><br><span class="line">            <span class="comment">//赋值上一项</span></span><br><span class="line">            preCash = cash;</span><br><span class="line">            preStock = stock;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cash;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit5</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] cash = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">        <span class="keyword">int</span>[] stock = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        cash[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        stock[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">             cash[i] = Math.max(cash[i-<span class="number">1</span>] ,stock[i-<span class="number">1</span>] + prices[i]);</span><br><span class="line">             stock[i] = Math.max(stock[i-<span class="number">1</span>],cash[i-<span class="number">1</span>]-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cash[prices.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User:</span></span><br><span class="line"><span class="comment"> * Date: 2020-11-11</span></span><br><span class="line"><span class="comment"> * Time: 22:16</span></span><br><span class="line"><span class="comment"> * 先看下题目：给你 k 种面值的硬币，面值分别为 c1, c2 ... ck，</span></span><br><span class="line"><span class="comment"> * 每种硬币的数量无限，再给一个总金额 amount，问你最少需要几枚</span></span><br><span class="line"><span class="comment"> * 硬币凑出这个金额，如果不可能凑出，算法返回 -1 。算法的函数签名如下：</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * coins 中是可选硬币面值，amount 是目标金额</span></span><br><span class="line"><span class="comment"> * int coinChange(int[] coins, int amount);</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * k = 3，面值分别为 1，2，5，总金额 amount = 11。那么最少需要 3 枚硬币凑出，即 11 = 5 + 5 + 1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeTheChange</span> </span>&#123;</span><br><span class="line">    <span class="comment">//较好的说明</span></span><br><span class="line">    <span class="comment">//最后一个硬币是1的话，最少硬币数应该为【组成10的最少硬币数】+ 1枚（1块硬币）</span></span><br><span class="line">    <span class="comment">//最后一个硬币是2的话，最少硬币数应该为【组成9的最少硬币数】+ 1枚（2块硬币）</span></span><br><span class="line">    <span class="comment">//最后一个硬币是5的话，最少硬币数应该为【组成6的最少硬币数】+ 1枚（5块硬币）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(coinChange(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;, <span class="number">11</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断数组的容量和金额大小</span></span><br><span class="line">        <span class="keyword">if</span> (coins.length &lt;= <span class="number">0</span> || amount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (amount ==<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="comment">//考虑建立一个数组存放每个状态的值,表示dp[i] 要取出金额为i 需要的金币的最小的数量</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[i] = <span class="number">99999</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> coin : coins) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= coin) &#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i - coin] + <span class="number">1</span>, dp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = dp[amount] == <span class="number">99999</span> ? -<span class="number">1</span>:dp[amount];</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LengthOfLIS</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment">     * Description:</span></span><br><span class="line"><span class="comment">     * User:</span></span><br><span class="line"><span class="comment">     * Date: 2020-11-12</span></span><br><span class="line"><span class="comment">     * Time: 21:26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; inte = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        inte.add(<span class="number">1</span>);</span><br><span class="line">        inte.add(<span class="number">2</span>);</span><br><span class="line">        inte.add(<span class="number">3</span>);</span><br><span class="line">        inte.add(<span class="number">4</span>);</span><br><span class="line">        inte.add(<span class="number">5</span>);</span><br><span class="line">        inte.add(<span class="number">6</span>);</span><br><span class="line">        inte.add(<span class="number">8</span>);</span><br><span class="line">        inte.forEach(System.out::println);</span><br><span class="line">        <span class="comment">//(-(插入点) - 1)。插入点 被定义为将键插入列表的那一点：即第一个大于此键的元素索引</span></span><br><span class="line">        System.out.println(Collections.binarySearch(inte, <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先边界条件的确定</span></span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//考虑就一个数组用来存放状态值,对数组的余地,dp[i] = number 第多少个数的最长上升子序列</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//考虑最小的长度为一,初始化数组</span></span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//怎么确定转移方程,既是我们知道dp[i-1] 怎么求dp[i]</span></span><br><span class="line">        <span class="comment">//我们只要找到前面的子问题中最后一位比dp[i]小的最大子问题即可+1</span></span><br><span class="line">        <span class="comment">//使用一个循环求取所有的状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">//这里的判断是求取的关键</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组中最大的状态就是最长的最长上升子序列</span></span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            tmp = Math.max(dp[i], tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lengthOfLIS1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用二分查找</span></span><br><span class="line">        <span class="comment">//思路建立一个集合,首先存储第一次的数,以及如果某前面的数小于后面的数直接添加到集合中</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(nums.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="comment">//集合的长度为0的时候或者前面的数小于后面的数就添加到集合中</span></span><br><span class="line">            <span class="keyword">if</span> (list.size() == <span class="number">0</span> || list.get(list.size() - <span class="number">1</span>) &lt; num) &#123;</span><br><span class="line">                list.add(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//二分法 binarySearch返回值是第一个大于它的索引</span></span><br><span class="line">                <span class="comment">// (-(插入点) - 1)。插入点 被定义为将键插入列表的那一点：即第一个大于此键的元素索引</span></span><br><span class="line">                <span class="keyword">int</span> i = Collections.binarySearch(list, num);</span><br><span class="line">                <span class="comment">//如果i&gt;0 说明本来就存在直接替换即可 ,如果小于取反减去1</span></span><br><span class="line">                list.set((i &lt; <span class="number">0</span>) ? -i-<span class="number">1</span> : i , num);</span><br><span class="line">                 <span class="comment">//下面的这种写法通过不了</span></span><br><span class="line">               <span class="comment">// list.set((i &gt; 0) ? i : -i - 1, num);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="type">Arithmetic</span>.<span class="type">DynamicPlanning</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最长回文子串</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">LongestPalindrome</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(longestPalindrome(<span class="string">&quot;cbbd&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span></span>(s: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> length = s.length</span><br><span class="line">    <span class="comment">//特例处理</span></span><br><span class="line">    <span class="keyword">if</span> (s.length &lt; <span class="number">2</span>) <span class="keyword">return</span> s.charAt(<span class="number">0</span>) + <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//定义接收回文的长度和qishiweizhi</span></span><br><span class="line">    <span class="keyword">var</span> len = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> first = <span class="number">0</span></span><br><span class="line">    <span class="comment">//创建二维布尔数组</span></span><br><span class="line">    <span class="keyword">var</span> array = <span class="type">Array</span>.ofDim[<span class="type">Boolean</span>](length, length)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until length) &#123;</span><br><span class="line">      array(i)(i) = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对角线必然是true,从1开始,先列-&gt;行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j &lt;- <span class="number">1</span> until length) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">          array(i)(j) = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//表达式 [i + 1, j - 1] 不构成区间，即长度严格小于 2</span></span><br><span class="line">           <span class="keyword">if</span> (j - i  &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            array(i)(j) = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果外面的相等则比较里面的里面的</span></span><br><span class="line">            array(i)(j) = array(i + <span class="number">1</span>)(j - <span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取值</span></span><br><span class="line">        <span class="keyword">if</span> (array(i)(j)  &amp;&amp; (j - i +<span class="number">1</span> &gt; len)) &#123;</span><br><span class="line">          len = j - i + <span class="number">1</span></span><br><span class="line">          first = i</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">          s.substring(first,first+len)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxSubArray</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 给定一个整数数组 nums ，找到一个具有最大和的连续子数组</span></span><br><span class="line"><span class="comment">     * （子数组最少包含一个元素），返回其最大和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 思想:相加数组中的所有元素,直到遇到一个比这个和还要大的元素,舍弃这个和,重新求和,反复进行</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        maxSubArray1(nums);</span><br><span class="line">        maxSubArray2(nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//f(i)=max&#123;f(i−1)+a 转移方程 滚动思想</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxSubArray1</span><span class="params">(<span class="keyword">int</span>[] ints)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//索引 0-ints.lenth</span></span><br><span class="line">        <span class="comment">//用来接收和</span></span><br><span class="line">        <span class="keyword">if</span> (ints.length==<span class="number">0</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//最大的值</span></span><br><span class="line">        <span class="keyword">int</span> max = ints[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : ints) &#123;</span><br><span class="line">            <span class="comment">//转移方程,如果前面的和小于x,则舍弃前面的所有数</span></span><br><span class="line">            sum = Math.max(sum + x, x);</span><br><span class="line">            <span class="comment">//比较与赋值</span></span><br><span class="line">            max = Math.max(sum, max);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态规划</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxSubArray2</span><span class="params">(<span class="keyword">int</span>[] ints)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数组的长度</span></span><br><span class="line">        <span class="keyword">int</span> length = ints.length;</span><br><span class="line">        <span class="comment">//构建一个dp存放以ints[i]为结尾最大子序</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        dp[<span class="number">0</span>] = ints[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 取当前元素的值 和 当前元素的值加上一次结果的值中最大数</span></span><br><span class="line">            dp[i] = Math.max(ints[i], dp[i - <span class="number">1</span>] + ints[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历dp数据获取最大的最大子序</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : dp) &#123;</span><br><span class="line">            max = Math.max(max, x);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="跳跃游戏I"><a href="#跳跃游戏I" class="headerlink" title="跳跃游戏I"></a>跳跃游戏I</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CanJump</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(canJump(<span class="type">Array</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>)))</span><br><span class="line">    println(canJump1(<span class="type">Array</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>)))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">canJump</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Boolean</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一,从前往后跳</span></span><br><span class="line">    <span class="comment">//思路,某一步能跳的最大步径途中的所有经过的数,取最大的步径</span></span><br><span class="line">    <span class="comment">//设置一个val 接收跳到的最大位置</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until nums.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      max = <span class="type">Math</span>.max(max, i + nums(i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max &gt;= nums.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">canJump1</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="comment">//从后往前</span></span><br><span class="line">    <span class="comment">//思路,如果倒数第二个能到达,则能到达</span></span><br><span class="line">        <span class="comment">//表示数组的最后一个元素</span></span><br><span class="line">    <span class="keyword">var</span> last = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="comment">//逆向遍历,如果不存在就继续遍历</span></span><br><span class="line">     <span class="keyword">for</span> (i &lt;- (<span class="number">0</span> to  nums.length<span class="number">-2</span>).reverse )&#123;</span><br><span class="line">           println(i)</span><br><span class="line">           <span class="keyword">if</span> ((i + nums(i)&gt;last))&#123;</span><br><span class="line">               last = i</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">return</span>  last ==<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用最小花费爬楼梯"><a href="#使用最小花费爬楼梯" class="headerlink" title="使用最小花费爬楼梯"></a>使用最小花费爬楼梯</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minCostClimbingStairs</span></span>(cost: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="comment">//踏上topi 有两种选择 踏上前 min(i-2) + cost(i-1) 和 min(i-1) + cost(i)</span></span><br><span class="line">  <span class="comment">//考虑一个数组存放中间值</span></span><br><span class="line">  <span class="keyword">val</span> array = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](cost.length)</span><br><span class="line">  array(<span class="number">0</span>) = <span class="number">0</span></span><br><span class="line">  array(<span class="number">1</span>) = cost(<span class="number">1</span>).min(cost(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">for</span> (i &lt;- <span class="number">2</span> until cost.length) &#123;</span><br><span class="line">    array(i) = (array(i - <span class="number">2</span>) + cost(i - <span class="number">1</span>)).min((array(i - <span class="number">1</span>) + cost(i)))</span><br><span class="line">  &#125;</span><br><span class="line">  array(cost.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minCostClimbingStairs1</span></span>(cost: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">   <span class="comment">//简单优化</span></span><br><span class="line">   <span class="keyword">var</span> min1 = <span class="number">0</span></span><br><span class="line">   <span class="keyword">var</span> min2 = cost(<span class="number">0</span>).min(cost(<span class="number">1</span>))</span><br><span class="line">   <span class="keyword">var</span> minresult = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> (i &lt;- <span class="number">2</span> until cost.length) &#123;</span><br><span class="line">     minresult = <span class="type">Math</span>.min(min1 + cost(i - <span class="number">1</span>), min2 + cost(i))</span><br><span class="line">     min1 = min2</span><br><span class="line">     min2 = minresult</span><br><span class="line">   &#125;</span><br><span class="line">   minresult</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//与上一种方法的区别在于是否包含i</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minCostClimbingStairs2</span></span>(cost: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="comment">//要到达topi 则要比较 minresult(i-1) + cost(i) 和 minresult(i-2) + cost (i)</span></span><br><span class="line">  <span class="keyword">var</span> min1 = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> min2 = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">  cost.foreach(</span><br><span class="line">    data =&gt; &#123;</span><br><span class="line">      result = min1.min(min2) + data</span><br><span class="line">      min1 = min2</span><br><span class="line">      min2 = result</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">   min1.min(min2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs3</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[cost.length];</span><br><span class="line">        dp[<span class="number">0</span>] = cost[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = cost[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; cost.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]) + cost[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[cost.length - <span class="number">2</span>], dp[cost.length - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影</span></span><br><span class="line"><span class="comment">// 响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</span></span><br><span class="line"><span class="comment">//给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</span></span><br><span class="line"><span class="comment">//输入：[2,7,9,3,1]</span></span><br><span class="line"><span class="comment">//输出：12</span></span><br><span class="line"><span class="comment">//解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span></span><br><span class="line"><span class="comment">//     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Rob</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rob</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">       <span class="keyword">if</span>(nums == <span class="literal">null</span> ||   nums.length ==<span class="number">0</span>) <span class="keyword">return</span>  <span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> (nums.length==<span class="number">1</span>)  <span class="keyword">return</span>    nums(<span class="number">0</span>)</span><br><span class="line">       <span class="keyword">var</span> a :<span class="type">Int</span> = nums(<span class="number">0</span>)</span><br><span class="line">       <span class="keyword">var</span> b :<span class="type">Int</span> = <span class="type">Math</span>.max(nums(<span class="number">0</span>),nums(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (i &lt;- <span class="number">2</span>  until  nums.length)&#123;</span><br><span class="line">                  <span class="keyword">var</span> tmp :<span class="type">Int</span> =  b</span><br><span class="line">                  b  = <span class="type">Math</span>.max(a+nums(i),b)</span><br><span class="line">                  a = tmp</span><br><span class="line">          &#125;</span><br><span class="line">           b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rob1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">37</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Rob1().rob1(ints));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//要判断是否为null 和 为 0</span></span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">1</span>], nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用滚动数组方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//视为n-1项</span></span><br><span class="line">        <span class="keyword">int</span> first = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> second = Math.max(nums[<span class="number">1</span>], nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">               <span class="keyword">int</span>  tmp =  second;</span><br><span class="line">               <span class="comment">//这是结果</span></span><br><span class="line">               second = Math.max(first + nums[i],second);</span><br><span class="line">               first = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  second;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"><span class="comment">//一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</span></span><br><span class="line"><span class="comment">//机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</span></span><br><span class="line"><span class="comment">//问总共有多少条不同的路径？</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">UniquePaths</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(uniquePaths1(<span class="number">3</span>, <span class="number">7</span>))</span><br><span class="line">    println(uniquePaths2(<span class="number">3</span>, <span class="number">7</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span></span>(m: <span class="type">Int</span>, n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="type">Array</span>.ofDim[<span class="type">Boolean</span>](m, n)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to m - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> to n - <span class="number">1</span>) &#123;</span><br><span class="line">        array(i)(j) = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- array) &#123;</span><br><span class="line">      println(i.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths1</span></span>(m: <span class="type">Int</span>, n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> array = <span class="type">Array</span>.ofDim[<span class="type">Int</span>](m, n)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until m) &#123;</span><br><span class="line">      array(i)(<span class="number">0</span>) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until n) &#123;</span><br><span class="line">      array(<span class="number">0</span>)(i) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> until n) &#123;</span><br><span class="line">        array(i)(j) = array(i - <span class="number">1</span>)(j) + array(i)(j - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array(m - <span class="number">1</span>)(n - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths2</span></span>(m: <span class="type">Int</span>, n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](n)</span><br><span class="line">    util.<span class="type">Arrays</span>.fill(array, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until m) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">1</span> until n) &#123;</span><br><span class="line">        array(j) += array(j - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array(n - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Computer engineering</category>
        <category>Arithmetic</category>
      </categories>
      <tags>
        <tag>Reading Books</tag>
        <tag>Sorting and Searching Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Hbase-API</title>
    <url>/2020/11/15/In-common-use-Apache-Hbase-API/</url>
    <content><![CDATA[<h1 id="Apache-Hbase"><a href="#Apache-Hbase" class="headerlink" title="Apache Hbase"></a>Apache Hbase</h1><p>HBase是一个构建在HDFS上的分布式列存储系统；HBase是基于Google BigTable模型开发的，典型的key/value系统；HBase是Apache Hadoop生态系统中的重要一员，主要用于海量结构化数据存储；从逻辑上讲，HBase将数据按照表、行和列进行存储。与hadoop一样，Hbase目标主要依靠横向扩展，通过不断增加廉价的商用服务器，来增加计算和存储能力。</p>
<p>HbaseUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-11-06</span></span><br><span class="line"><span class="comment"> * Time: 20:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HbaseUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        configuration = HBaseConfiguration.create();</span><br><span class="line">        configuration.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;linux03,linux04,linux05&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if (connection.isClosed() &amp;&amp; connection== null)</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DDLTable"><a href="#DDLTable" class="headerlink" title="DDLTable"></a>DDLTable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.NamespaceDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-11-06</span></span><br><span class="line"><span class="comment"> * Time: 20:34</span></span><br><span class="line"><span class="comment"> * DDL语法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DDLTable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println(createTable(&quot;tab_111&quot;, &quot;f1&quot;, &quot;f2&quot;));</span></span><br><span class="line">        <span class="comment">// System.out.println(isTableExist(&quot;tab_1&quot;));</span></span><br><span class="line">       <span class="comment">// System.out.println(addFamily(&quot;tab_1&quot;, &quot;f3&quot;));</span></span><br><span class="line">        <span class="comment">//System.out.println(dropTable(&quot;tab_1&quot;));</span></span><br><span class="line">        System.out.println(createNamespace(<span class="string">&quot;myspace&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断表是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isTableExist</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        <span class="comment">//对表的操作</span></span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line">        <span class="keyword">return</span> admin.tableExists(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">createTable</span><span class="params">(String tableName, String... cfs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        <span class="comment">//首先判断表是否存在</span></span><br><span class="line">        <span class="comment">//判断列族是否为空</span></span><br><span class="line">        <span class="comment">//发现一个错误,竟然没写!  查了好久</span></span><br><span class="line">        <span class="keyword">if</span> (!isTableExist(tableName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cfs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Admin admin = connection.getAdmin();</span><br><span class="line">                <span class="comment">//采用工厂方法</span></span><br><span class="line">                TableDescriptorBuilder tableDescriptorBuilder = TableDescriptorBuilder.newBuilder(TableName.valueOf(tableName));</span><br><span class="line">                <span class="comment">//添加列族</span></span><br><span class="line">                <span class="keyword">for</span> (String cf : cfs) &#123;</span><br><span class="line">                    ColumnFamilyDescriptorBuilder columnFamily = ColumnFamilyDescriptorBuilder.newBuilder(cf.getBytes());</span><br><span class="line">                    tableDescriptorBuilder.setColumnFamily(columnFamily.build());</span><br><span class="line">                &#125;</span><br><span class="line">                admin.createTable(tableDescriptorBuilder.build());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">createTable1</span><span class="params">(String table, String... cfs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        <span class="comment">//判断列族是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (cfs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断表是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (isTableExist(table)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line">        <span class="comment">//表的构建</span></span><br><span class="line">        TableDescriptorBuilder tableDescriptorBuilder = TableDescriptorBuilder.newBuilder(TableName.valueOf(table));</span><br><span class="line">        <span class="comment">//列族的构建</span></span><br><span class="line">        <span class="keyword">for</span> (String cf : cfs) &#123;</span><br><span class="line">            ColumnFamilyDescriptorBuilder columnFamilyDescriptorBuilder = ColumnFamilyDescriptorBuilder.newBuilder(cf.getBytes());</span><br><span class="line">            tableDescriptorBuilder.setColumnFamily(columnFamilyDescriptorBuilder.build());</span><br><span class="line">        &#125;</span><br><span class="line">        admin.createTable(tableDescriptorBuilder.build());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加列族</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">addFamily</span><span class="params">(String tableName, String... cfs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line">        <span class="comment">//先判断表是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (isTableExist(tableName)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String cf : cfs) &#123;</span><br><span class="line">                ColumnFamilyDescriptorBuilder columnFamily = ColumnFamilyDescriptorBuilder.newBuilder(cf.getBytes());</span><br><span class="line">                admin.addColumnFamily(TableName.valueOf(tableName), columnFamily.build());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">dropTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        <span class="keyword">if</span> (isTableExist(tableName)) &#123;</span><br><span class="line"></span><br><span class="line">            Admin admin = connection.getAdmin();</span><br><span class="line">            admin.disableTable(TableName.valueOf(tableName));</span><br><span class="line">            admin.deleteTable(TableName.valueOf(tableName));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建名称空间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  Boolean <span class="title">createNamespace</span><span class="params">(String spacename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line">        NamespaceDescriptor build = NamespaceDescriptor.create(spacename).build();</span><br><span class="line">        admin.createNamespace(build);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DeleteData"><a href="#DeleteData" class="headerlink" title="DeleteData"></a>DeleteData</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-11-07</span></span><br><span class="line"><span class="comment"> * Time: 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteData</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// deleteData(&quot;tab_2&quot;,&quot;10001&quot;);</span></span><br><span class="line">        deleteData1(<span class="string">&quot;tab_2&quot;</span>, <span class="string">&quot;40001&quot;</span>, <span class="string">&quot;status&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除rowkey</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">(String tableName, String rowkey)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowkey));</span><br><span class="line">        table.delete(delete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteData1</span><span class="params">(String tableName, String rowkey, String cf)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = HbaseUtils.getConnection().getTable(TableName.valueOf(tableName));</span><br><span class="line">        Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowkey));</span><br><span class="line">        delete.addFamily(Bytes.toBytes(cf));</span><br><span class="line">        table.delete(delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="DMLTable"><a href="#DMLTable" class="headerlink" title="DMLTable"></a>DMLTable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CellUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CompareOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.filter.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DMLTable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment">     * Description:</span></span><br><span class="line"><span class="comment">     * User: tongyongtao</span></span><br><span class="line"><span class="comment">     * Date: 2020-11-06</span></span><br><span class="line"><span class="comment">     * Time: 22:00</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// putData(&quot;tab_2&quot;, &quot;60005&quot;, &quot;status&quot;, &quot;name&quot;, &quot;小胡&quot;);</span></span><br><span class="line">        <span class="comment">// getData(&quot;tab_2&quot;,&quot;10001&quot;);</span></span><br><span class="line">        <span class="comment">//  scanData(&quot;tab_2&quot;,&quot;&quot;,&quot;&quot;);</span></span><br><span class="line">        <span class="comment">// filterData(&quot;tab_2&quot;);</span></span><br><span class="line">        <span class="comment">// filterData1(&quot;tab_2&quot;,&quot;status&quot;,&quot;age&quot;,&quot;19&quot;);</span></span><br><span class="line">        <span class="comment">// filterData2(&quot;tab_2&quot;,&quot;status&quot;);</span></span><br><span class="line">        filterData3(<span class="string">&quot;tab_2&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putData</span><span class="params">(String tableName, String rowkey, String cf, String cm, String values)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowkey));</span><br><span class="line">        put.addColumn(Bytes.toBytes(cf), Bytes.toBytes(cm), Bytes.toBytes(values));</span><br><span class="line">        table.put(put);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String tableName, String rowkey)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowkey));</span><br><span class="line">        Result result = table.get(get);</span><br><span class="line">        <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(CellUtil.cloneFamily(cell)));</span><br><span class="line">            <span class="comment">// System.out.println(Arrays.toString(Bytes.toBytes(ByteBuffer.wrap(CellUtil.cloneQualifier(cell)))));</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(CellUtil.cloneQualifier(cell)));</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(CellUtil.cloneValue(cell)));</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(CellUtil.cloneRow(cell)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData1</span><span class="params">(String tableName, String rowkey)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        List&lt;Get&gt; gets = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取多个rowkey</span></span><br><span class="line">        gets.add(<span class="keyword">new</span> Get(Bytes.toBytes(<span class="string">&quot;100001&quot;</span>)));</span><br><span class="line">        gets.add(<span class="keyword">new</span> Get(Bytes.toBytes(<span class="string">&quot;10002&quot;</span>)));</span><br><span class="line">        Result[] results = table.get(gets);</span><br><span class="line">        <span class="keyword">for</span> (Result result : results) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//scan方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanData</span><span class="params">(String tableName, String start, String stop)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        <span class="keyword">try</span> (ResultScanner scanner = table.getScanner(scan)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Result result : scanner) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">                    System.out.println(((Bytes.toString(CellUtil.cloneRow(cell)))));</span><br><span class="line">                    System.out.println(Bytes.toString(CellUtil.cloneFamily(cell)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关于scan的过滤器  列族过滤</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterData</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        Filter filter = <span class="keyword">new</span> RowFilter(CompareOperator.EQUAL, <span class="keyword">new</span> SubstringComparator(<span class="string">&quot;10001&quot;</span>));</span><br><span class="line">        scan.setFilter(filter);</span><br><span class="line">        ResultScanner scanner = table.getScanner(scan);</span><br><span class="line">        <span class="keyword">for</span> (Result result : scanner) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">                System.out.println(Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关于scan过滤  值过滤 一般采用SingleColumnValueFilter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterData1</span><span class="params">(String tableName, String cf, String cm, String values)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        Filter filter = <span class="keyword">new</span> SingleColumnValueFilter</span><br><span class="line">                (Bytes.toBytes(cf), Bytes.toBytes(cm), CompareOperator.EQUAL, Bytes.toBytes(values));</span><br><span class="line">        scan.setFilter(filter);</span><br><span class="line">        ResultScanner scanner = table.getScanner(scan);</span><br><span class="line">        <span class="keyword">for</span> (Result result : scanner) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">                System.out.println(Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//列族的过滤</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterData2</span><span class="params">(String tableName, String cf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        FamilyFilter filter = <span class="keyword">new</span> FamilyFilter(CompareOperator.EQUAL, <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(cf)));</span><br><span class="line">        scan.setFilter(filter);</span><br><span class="line">        ResultScanner scanner = table.getScanner(scan);</span><br><span class="line">        <span class="keyword">for</span> (Result result : scanner) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">                System.out.println(Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterData3</span><span class="params">(String tableName, String cm)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = HbaseUtils.getConnection();</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        QualifierFilter filter = <span class="keyword">new</span> QualifierFilter(CompareOperator.EQUAL, <span class="keyword">new</span> SubstringComparator(cm));</span><br><span class="line">        scan.setFilter(filter);</span><br><span class="line">        ResultScanner scanner = table.getScanner(scan);</span><br><span class="line">        <span class="keyword">for</span> (Result result : scanner) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">                System.out.println(Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="MR-Interaction"><a href="#MR-Interaction" class="headerlink" title="MR Interaction"></a>MR Interaction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HbaseBean1</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String movie;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HbaseBean1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovie</span><span class="params">(String movie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRate</span><span class="params">(<span class="keyword">double</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimeStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeStamp</span><span class="params">(<span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HbaseBean1</span><span class="params">(String movie, <span class="keyword">double</span> rate, <span class="keyword">long</span> timeStamp, String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Movie&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;movie=&#x27;&quot;</span> + movie + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, rate=&quot;</span> + rate +</span><br><span class="line">                <span class="string">&quot;, timeStamp=&quot;</span> + timeStamp +</span><br><span class="line">                <span class="string">&quot;, uid=&#x27;&quot;</span> + uid + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeUTF(movie);</span><br><span class="line">        dataOutput.writeDouble(rate);</span><br><span class="line">        dataOutput.writeLong(timeStamp);</span><br><span class="line">        dataOutput.writeUTF(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = dataInput.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.rate = dataInput.readDouble();</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = dataInput.readLong();</span><br><span class="line">        <span class="keyword">this</span>.uid = dataInput.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.io.ImmutableBytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableReducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-12</span></span><br><span class="line"><span class="comment"> * Time: 22:19</span></span><br><span class="line"><span class="comment"> * Hbase与MR的交互</span></span><br><span class="line"><span class="comment"> * 案例:电影案例 分析:设计rowkey  ImmutableBytesWritable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_Hbase1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\hbase.json&quot;</span>&#125;;</span><br><span class="line">        Configuration con = HBaseConfiguration.create();</span><br><span class="line">        con.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;linux03,linux04,linux05&quot;</span>);</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;MR_Hbase&quot;</span>);</span><br><span class="line">        job.setMapperClass(MAP_Hbase1.class);</span><br><span class="line">        job.setReducerClass(Reduce_Hbase1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(HbaseBean1.class);</span><br><span class="line">        <span class="comment">// 穿件扫描对象用来扫描源hbase中的所有的数据</span></span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        <span class="comment">// 接收的扫描的数据的行数</span></span><br><span class="line">        scan.setCaching(<span class="number">200</span>);</span><br><span class="line">        scan.setCacheBlocks(<span class="keyword">false</span>);</span><br><span class="line">        job.setJarByClass(HbaseBean1.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入数据的路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 插入数据的表要存在</span></span><br><span class="line">        TableMapReduceUtil.initTableReducerJob(<span class="string">&quot;movie1&quot;</span>, Reduce_Hbase1.class, job);</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;zq&quot;</span> : <span class="string">&quot;cw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MAP_Hbase1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">HbaseBean1</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">static</span>  Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">                    <span class="comment">//电影名字和时间龊构成一个rowkey</span></span><br><span class="line">            HbaseBean1 hbaseBean = <span class="keyword">null</span>;</span><br><span class="line">            Text text = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hbaseBean = gson.fromJson(value.toString(), HbaseBean1.class);</span><br><span class="line">                String movie = StringUtils.leftPad(hbaseBean.getMovie(), <span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                String movieStamp = StringUtils.leftPad( String.valueOf(hbaseBean.getTimeStamp()),<span class="number">9</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                text = <span class="keyword">new</span> Text();</span><br><span class="line">                text.set(movie+<span class="string">&quot;_&quot;</span>+movieStamp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            context.write(text,hbaseBean);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_Hbase1</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">Text</span>, <span class="title">HbaseBean1</span>, <span class="title">ImmutableBytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;HbaseBean1&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//key是rowkey values,迭代器只存储了一个</span></span><br><span class="line">            Put put = <span class="keyword">new</span> Put(key.toString().getBytes());</span><br><span class="line">            <span class="keyword">for</span> (HbaseBean1 value : values) &#123;</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;moviename&quot;</span>.getBytes(),value.getMovie().getBytes());</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;movierate&quot;</span>.getBytes(),String.valueOf(value.getRate()).getBytes());</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;moviestamp&quot;</span>.getBytes(),String.valueOf(value.getTimeStamp()).getBytes());</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;movieuid&quot;</span>.getBytes(),value.getUid().getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(<span class="keyword">null</span>,put);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Coprocessor"><a href="#Coprocessor" class="headerlink" title="Coprocessor"></a>Coprocessor</h2><h2 id="Phoenix"><a href="#Phoenix" class="headerlink" title="Phoenix"></a>Phoenix</h2>]]></content>
      <categories>
        <category>The Hadoop Ecosystem</category>
        <category>Learning Hbase</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
        <tag>Work Systematically</tag>
      </tags>
  </entry>
  <entry>
    <title>Java容器详解</title>
    <url>/2020/10/24/Java-CollectionsFramework/</url>
    <content><![CDATA[<h2 id="一-ArrayList和LinkedList的区别以及优缺点"><a href="#一-ArrayList和LinkedList的区别以及优缺点" class="headerlink" title="一.ArrayList和LinkedList的区别以及优缺点"></a>一.ArrayList和LinkedList的区别以及优缺点</h2><ol>
<li><p> ArrayList是实现了基于动态数组的数据结构，LinkedList是基于链表结构。</p>
</li>
<li><p> 对于随机访问的get和set方法，ArrayList要优于LinkedList，因为LinkedList要移动指针。</p>
</li>
<li><p> 对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p>
</li>
<li><p>对ArrayList和LinkedList而言，在列表末尾增加一个元素所花的开销都是固定的。对ArrayList而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；而对LinkedList而言，这个开销是统一的,分配一个内部Entry对象。</p>
</li>
<li><p>在ArrayList集合中添加或者删除一个元素时，当前的列表所所有的元素都会被移动。而LinkedList集合中添加或者删除一个元素的开销是固定的。</p>
</li>
<li><p>LinkedList集合不支持高效的随机随机访问（RandomAccess），因为可能产生二次项的行为。</p>
</li>
<li><p>ArrayList的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗相当的空间</p>
</li>
<li><p>我们进行对元素的增删查操作的时候，进行查操作时用ArrayList，进行增删操作的时候最好用LinkedList。</p>
</li>
</ol>
<h2 id="二-ArrayList源码分析"><a href="#二-ArrayList源码分析" class="headerlink" title="二.ArrayList源码分析"></a>二.ArrayList源码分析</h2><h4 id="方法源码分析"><a href="#方法源码分析" class="headerlink" title="方法源码分析"></a>方法源码分析</h4><h6 id="add"><a href="#add" class="headerlink" title="add"></a><code>add</code></h6><h6 id="remove"><a href="#remove" class="headerlink" title="remove"></a><code>remove</code></h6><h6 id="快速失败机制"><a href="#快速失败机制" class="headerlink" title="快速失败机制"></a><code>快速失败机制</code></h6><h6 id="关于遍历时删除"><a href="#关于遍历时删除" class="headerlink" title="关于遍历时删除"></a><code>关于遍历时删除</code></h6><h4 id="分析-ArrayList-扩容机制"><a href="#分析-ArrayList-扩容机制" class="headerlink" title="分析 ArrayList 扩容机制"></a>分析 ArrayList 扩容机制</h4><h6 id="add-1"><a href="#add-1" class="headerlink" title="add"></a><code>add</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//添加元素之前，先调用ensureCapacityInternal方法</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        <span class="comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="ensureCapacityInternal"><a href="#ensureCapacityInternal" class="headerlink" title="ensureCapacityInternal()"></a><code>ensureCapacityInternal()</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到最小扩容量</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">             <span class="comment">// 获取默认的容量和传入参数的较大值</span></span><br><span class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ensureExplicitCapacity(minCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h6 id="ensureExplicitCapacity"><a href="#ensureExplicitCapacity" class="headerlink" title="ensureExplicitCapacity()"></a><code>ensureExplicitCapacity()</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h6 id="grow"><a href="#grow" class="headerlink" title="grow()"></a><code>grow()</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 要分配的最大数组大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">       <span class="comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">      <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">      <span class="comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h6 id="hugeCapacity"><a href="#hugeCapacity" class="headerlink" title="hugeCapacity()"></a><code>hugeCapacity()</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *从上面 grow() 方法源码我们知道： 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) hugeCapacity() 方法来比较 minCapacity 和    *MAX_ARRAY_SIZE，如果 minCapacity 大于最大容量，则新容量则为Integer.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE </span></span><br><span class="line"><span class="comment">   *为 Integer.MAX_VALUE - 8</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="comment">//对minCapacity和MAX_ARRAY_SIZE进行比较</span></span><br><span class="line">        <span class="comment">//若minCapacity大，将Integer.MAX_VALUE作为新数组的大小</span></span><br><span class="line">        <span class="comment">//若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小</span></span><br><span class="line">        <span class="comment">//MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span></span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h6 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy()"></a><code>System.arraycopy()</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在此列表中的指定位置插入指定的元素。</span></span><br><span class="line"><span class="comment">    *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；</span></span><br><span class="line"><span class="comment">    *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       <span class="comment">//arraycopy()方法实现数组自己复制自己</span></span><br><span class="line">       <span class="comment">//elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量；</span></span><br><span class="line">       System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">       elementData[index] = element;</span><br><span class="line">       size++;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h6 id="Arrays-copyOf"><a href="#Arrays-copyOf" class="headerlink" title="Arrays.copyOf()"></a><code>Arrays.copyOf()</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="comment">//elementData：要复制的数组；size：要复制的长度</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity"></a><code>ensureCapacity</code></h6><p><strong>最好在 add 大量元素之前用 <code>ensureCapacity</code> 方法，以减少增量重新分配的次数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   如有必要，增加此 ArrayList 实例的容量，以确保它至少可以容纳由minimum capacity参数指定的元素数。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>   minCapacity   所需的最小容量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">           <span class="comment">// any size if not default element table</span></span><br><span class="line">           ? <span class="number">0</span></span><br><span class="line">           <span class="comment">// larger than default for default empty table. It&#x27;s already</span></span><br><span class="line">           <span class="comment">// supposed to be at default size.</span></span><br><span class="line">           : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">           ensureExplicitCapacity(minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h2 id="三-无序性和不可重复性的含义是什么"><a href="#三-无序性和不可重复性的含义是什么" class="headerlink" title="三.无序性和不可重复性的含义是什么"></a>三.无序性和不可重复性的含义是什么</h2><ul>
<li><p>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数组的哈希值决定的</p>
</li>
<li><p>不可重复性：保证添加的元素按照equals（）判断时，不能返回true，即相同的元素只能添加一个,需要同时重写equals()方法和hashcode()方法</p>
</li>
</ul>
<h2 id="四-HashMap源码分析"><a href="#四-HashMap源码分析" class="headerlink" title="四.HashMap源码分析"></a>四.HashMap源码分析</h2><h4 id="方法源码分析-1"><a href="#方法源码分析-1" class="headerlink" title="方法源码分析"></a>方法源码分析</h4><h6 id="HashMap-hash"><a href="#HashMap-hash" class="headerlink" title="HashMap  hash "></a><code>HashMap  hash </code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">    <span class="comment">// ^ ：按位异或</span></span><br><span class="line">    <span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//为什么这样设计 (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span></span><br><span class="line">  <span class="comment">//jdk1.7中有indexFor(int h, int length)方法,这个方法返回值就是数组下标</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//由于和（length-1）运算，length 绝大多数情况小于2的16次方。所以始终是hashcode 的低16位（甚至更低）参与运算。要是高16位     //也参与运算，会让得到的下标更加散列</span></span><br><span class="line">  <span class="comment">//&amp;和|都会使得结果偏向0或者1 ,并不是均匀的概念,所以用^</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="衡量数组是否需要扩增"><a href="#衡量数组是否需要扩增" class="headerlink" title="衡量数组是否需要扩增"></a><code>衡量数组是否需要扩增</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// loadFactor加载因子</span></span><br><span class="line"><span class="comment">//loadFactor加载因子是控制数组存放数据的疏密程度，loadFactor越趋近于1，</span></span><br><span class="line"><span class="comment">// 那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor越小，也就是趋近于0，</span></span><br><span class="line"><span class="comment">// 数组中存放的数据(entry)也就越少，也就越稀疏。</span></span><br><span class="line"><span class="comment">//loadFactor太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。</span></span><br><span class="line"><span class="comment">// loadFactor的默认值为0.75f是官方给出的一个比较好的临界值。</span></span><br><span class="line"><span class="comment">//给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 </span></span><br><span class="line"><span class="comment">// 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</span></span><br><span class="line"><span class="comment">//threshold</span></span><br><span class="line"><span class="comment">//*threshold = capacity * loadFactor*，当Size&gt;=threshold的时候，</span></span><br><span class="line"><span class="comment">// 那么就要考虑对数组的扩增了，也就是说，这个的意思就是 衡量数组是否需要扩增的一个标准。</span></span><br></pre></td></tr></table></figure>

<h6 id="put方法逻辑分析"><a href="#put方法逻辑分析" class="headerlink" title="put方法逻辑分析"></a><code>put方法逻辑分析</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 桶中已经存在元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">// 将第一个元素赋值给e，用e来记录</span></span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// hash值不相等，即key不相等；为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构性修改</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当桶数组 table 为空时，通过扩容的方式初始化 table</span></span><br><span class="line"><span class="comment">//查找要插入的键值对是否已经存在，存在的话根据条件判断是否用新值替换旧值</span></span><br><span class="line"><span class="comment">//如果不存在，则将键值对链入链表中，并根据链表长度决定是否将链表转为红黑树</span></span><br><span class="line"><span class="comment">//判断键值对数量是否大于阈值，大于的话则进行扩容操作</span></span><br></pre></td></tr></table></figure>



<h4 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h4><h6 id="resize"><a href="#resize" class="headerlink" title="resize"></a><code>resize</code></h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果 table 不为空，表明已经初始化过了</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 当 table 容量超过容量最大值，则不再扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 按旧容量和阈值的2倍计算新容量和阈值的大小</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 初始化时，将 threshold 的值赋值给 newCap，</span></span><br><span class="line"><span class="comment">         * HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 调用无参构造方法时，桶数组容量为默认容量，</span></span><br><span class="line"><span class="comment">         * 阈值为默认容量与默认负载因子乘积</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// newThr 为 0 时，按阈值计算公式进行计算</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">// 创建新的桶数组，桶数组的初始化也是在这里完成的</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 重新映射时，需要对红黑树进行拆分</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">// 遍历链表，并将链表节点按原顺序进行分组</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 将分组后的链表映射到新桶中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五-LinkedHashMap-源码详细分析"><a href="#五-LinkedHashMap-源码详细分析" class="headerlink" title="五.LinkedHashMap 源码详细分析"></a>五.LinkedHashMap 源码详细分析</h2><h2 id="六-ConcurrentHashMap-源码详细分析"><a href="#六-ConcurrentHashMap-源码详细分析" class="headerlink" title="六.ConcurrentHashMap 源码详细分析"></a>六.ConcurrentHashMap 源码详细分析</h2><h4 id="方法源码分析-2"><a href="#方法源码分析-2" class="headerlink" title="方法源码分析"></a>方法源码分析</h4><h6 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new, empty map with a default initial capacity (16),</span></span><br><span class="line"><span class="comment"> * load factor (0.75) and concurrencyLevel (16).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分别是默认初始化容量,默认负载因子,默认并发级别</span></span><br><span class="line">    <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="Arrays-asList-避坑指南"><a href="#Arrays-asList-避坑指南" class="headerlink" title="Arrays.asList()避坑指南"></a>Arrays.asList()避坑指南</h2>]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>Summary of knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Hive原理强化</title>
    <url>/2020/11/14/Hive-principle-reinforcement/</url>
    <content><![CDATA[<h1 id="Apache-Hive实践"><a href="#Apache-Hive实践" class="headerlink" title="Apache-Hive实践"></a>Apache-Hive实践</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><h4 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h4><ul>
<li><p><strong>STRUCT:例如: address  struct&lt;street:string, city:string&gt; 可以通过address.street 来访问</strong></p>
</li>
<li><p><strong>ARRAY:例如:friends array<string>  可以通过 friend[index] 来访问</strong></p>
</li>
<li><p><strong>MAP:例如:children map&lt;string, int&gt;, 可以通过children[key]来访问</strong></p>
</li>
</ul>
<h4 id="类型的转换"><a href="#类型的转换" class="headerlink" title="类型的转换"></a>类型的转换</h4><ul>
<li><p>INT不会自动转换为TINYINT类型，它会返回错误，除非使用CAST操作</p>
</li>
<li><p>任何整数类型都可以隐式地转换为一个范围更广的类型，如TINYINT可以转换成INT，INT可以转换成BIGINT。</p>
</li>
<li><p>所有整数类型、FLOAT和STRING类型都可以隐式地转换成DOUBLE。</p>
</li>
<li><p>TINYINT、SMALLINT、INT都可以转换为FLOAT。</p>
</li>
<li><p>BOOLEAN类型不可以转换为任何其它的类型</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表达结构</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;MobilePlatform&quot;</span>:<span class="string">&quot;apple&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;APP&quot;</span>:[<span class="string">&quot;jianshu&quot;</span>,<span class="string">&quot;csdn&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">              <span class="attr">&quot;xiaoming&quot;</span>:<span class="number">19</span>,</span><br><span class="line">              <span class="attr">&quot;xioahuang&quot;</span>:<span class="number">17</span></span><br><span class="line">         &#125;,</span><br><span class="line">     <span class="attr">&quot;address&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;street&quot;</span>:<span class="string">&quot;1000A&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;city&quot;</span>:<span class="string">&quot;zhongguo&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#建表语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">    MobilePlatform <span class="keyword">string</span>,</span><br><span class="line">    APP <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">map</span>&lt;<span class="keyword">string</span>,<span class="built_in">int</span>&gt;,</span><br><span class="line">    address  <span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&#x27;_&#x27;</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span></span><br><span class="line"><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">#语句的解释</span></span><br><span class="line">1.行列分隔符</span><br><span class="line">2.MAP STRUCT 和 ARRAY 的分隔符(数据分割符号)</span><br><span class="line">3.MAP中的key与value的分隔符</span><br><span class="line">4.行分隔符</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">txt数据与导入hive的语句</span><br><span class="line">apple,jianshu<span class="emphasis">_weibo,xiaoming:19_</span>xiaohua:17,1000A<span class="emphasis">_zhongguo</span></span><br><span class="line"><span class="emphasis">songsong,bingbing_</span>lili,xiao song:18<span class="emphasis">_xiaoxiao song:19,hui long guan_</span>beijing</span><br><span class="line"></span><br><span class="line">load data local inpath &quot;/root/test.txt&quot; into table test</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询语句和结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line">apple	[&quot;jianshu&quot;,&quot;weibo&quot;]	&#123;&quot;xiaoming&quot;:19,&quot;xiaohua&quot;:17&#125;	&#123;&quot;street&quot;:&quot;1000A&quot;,&quot;city&quot;:&quot;zhongguo&quot;&#125;</span><br><span class="line">songsong	[&quot;bingbing&quot;,&quot;lili&quot;]	&#123;&quot;xiao song&quot;:18,&quot;xiaoxiao song&quot;:19&#125;	&#123;&quot;street&quot;:&quot;hui long guan&quot;,&quot;city&quot;:&quot;beijing&quot;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> APP[<span class="number">1</span>],<span class="keyword">name</span>[<span class="string">&quot;xiaoming&quot;</span>], address.city <span class="keyword">from</span>  <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line">weibo	19	    zhongguo</span><br><span class="line">lili	null	beijing</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="DDL-数据定义语言详解"><a href="#DDL-数据定义语言详解" class="headerlink" title="DDL  数据定义语言详解"></a>DDL  数据定义语言详解</h2><h4 id="库"><a href="#库" class="headerlink" title="库"></a>库</h4><ol>
<li>数据库创建的标准语法</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>  db_demo1; </span><br><span class="line"><span class="comment">#创建一个数据库指定在HDFS位置</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>  db_demo1  <span class="string">&quot;/path&quot;</span>;</span><br></pre></td></tr></table></figure>



<ol>
<li>查询数据库的语法</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.显示 支持模糊查询</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">&quot;db_*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查询 显示数据库详细信息 extended </span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">database</span> db_demo1;</span><br><span class="line">desc database extended db_demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.切换</span></span><br><span class="line"><span class="keyword">use</span> db_demo1</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><p>修改数据库的语法与注意事项</p>
<p>用户可以使用<code>ALTER DATABASE</code>命令为某个数据库的<code>DBPROPERTIES</code>设置键-值对属性值，来描述这个数据库的属性信息。数据库的其他元数据信息都是不可更改的，包括数据库名和数据库所在的目录位置。</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> db_demo1 <span class="keyword">set</span> dbproperties(<span class="string">&#x27;createtime&#x27;</span>=<span class="string">&#x27;20201114&#x27;</span>);</span><br></pre></td></tr></table></figure>



<ol>
<li>删除数据库的标准语法</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> db_demo1 ;</span><br><span class="line"><span class="comment">#强制删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> db_demo1  <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure>



<h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><ol>
<li><p>建表语法的描述</p>
<p>CREATE TABLE:建表</p>
<p>EXTERNA:外部表</p>
<p>COMMENT:为表和列添加注释</p>
<p>PARTITIONED BY:分区</p>
<p>CLUSTERED BY:分桶</p>
<p>SORTED BY:</p>
<p>ROW FORMAT:在建表的时候可以自定义SerDe或者使用自带的SerDe</p>
<p>STORED AS :设置存储的类型</p>
<p>LOCATION :指定表在HDFS上的存储位置</p>
<p>LIKE:复制现有表的结构,但不复制内容</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#普通建表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询建表(查询结果添加到新表中)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> student1 <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">#根据已经存在的表结构建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> student2 <span class="keyword">like</span> student;</span><br><span class="line"><span class="comment">#查询类型</span></span><br><span class="line">desc formatted student2;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>内部表和外部表</strong></li>
</ol>
<ul>
<li><p>默认创建的表都是所谓的管理表，有时也被称为内部表,当我们删除一个管理表时，Hive也会删除这个表中数据。管理表不适合和其他工具共享数据</p>
</li>
<li><p>表是外部表，所以Hive并非认为其完全拥有这份数据。删除该表并不会删除掉这份数据，不过描述表的元数据信息会被删除掉</p>
</li>
<li><p><strong>删除内部表会直接删除元数据（metadata）及存储数据；删除外部表仅仅会删除元数据，HDFS上的文件并不会被删除；</strong></p>
</li>
<li><p>对内部表的修改会将修改直接同步给元数据，而对外部表的表结构和分区进行修改，则需要修复（MSCK REPAIR TABLE<br>table_name;）</p>
</li>
<li><p>适用的场合:每天将收集到的网站日志定期流入HDFS文本文件。在外部表（原始日志表）的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过SELECT+INSERT进入内部表。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#内部表和外部表的转换</span></span><br><span class="line"><span class="comment">#把内部表转换为外部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student2 <span class="keyword">set</span> tblproperties(<span class="string">&#x27;EXTERNAL&#x27;</span>=<span class="string">&#x27;TRUE&#x27;</span>);</span><br><span class="line"><span class="comment">##把外部表转换为内部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student2 <span class="keyword">set</span> tblproperties(<span class="string">&#x27;EXTERNAL&#x27;</span>=<span class="string">&#x27;FALSE&#x27;</span>);</span><br><span class="line"><span class="comment">##注意 &#x27;EXTERNAL&#x27;=&#x27;TRUE&#x27;  &#x27;EXTERNAL&#x27;=&#x27;FALSE&#x27; 是固定写法区分大小写</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><p><strong>分区表</strong></p>
<ul>
<li><p>概念</p>
<ul>
<li><p>分区表实际上就是对应一个HDFS文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。Hive中的分区就是分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过<strong>WHERE子句</strong>中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多。</p>
</li>
<li><p>查询时Hive自动过滤掉不用于提高性能的分区</p>
</li>
<li><p>分为静态分区和动态分区</p>
</li>
</ul>
</li>
<li><p>操作 (<strong>一级分区、二级分区、</strong>)</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#没有分区</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>  tb_order2(</span><br><span class="line"> <span class="keyword">oid</span> <span class="built_in">int</span> ,</span><br><span class="line">dt <span class="keyword">string</span> ,</span><br><span class="line"><span class="keyword">cost</span> <span class="keyword">double</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/6.18.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span>  tb_order2 ;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/6.19.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span>  tb_order2 ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_order2 <span class="keyword">where</span> dt=<span class="string">&#x27;2020-06-18&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一级分区</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>  tb_p_order(</span><br><span class="line"><span class="keyword">oid</span> <span class="built_in">int</span> ,</span><br><span class="line">dt <span class="keyword">string</span> ,</span><br><span class="line"><span class="keyword">cost</span> <span class="keyword">double</span></span><br><span class="line">)</span><br><span class="line">partitioned  <span class="keyword">by</span> (dy <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/6.18.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span>  tb_p_order  <span class="keyword">partition</span>(dy=<span class="string">&quot;06-18&quot;</span>);</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/6.19.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span>  tb_p_order  <span class="keyword">partition</span>(dy=<span class="string">&quot;06-19&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_p_order <span class="keyword">where</span>  dy=<span class="string">&quot;06-18&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除分区</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_p_order <span class="keyword">drop</span>  <span class="keyword">partition</span> (dy = <span class="string">&quot;06-18&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#二级分区</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_partition2(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> ,</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span> ,</span><br><span class="line">gender <span class="keyword">string</span> ,</span><br><span class="line">birthday <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">partitioned  <span class="keyword">by</span> (y <span class="keyword">string</span> , m <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span>  inpath <span class="string">&quot;/root/a.txt&quot;</span>  <span class="keyword">into</span>  <span class="keyword">table</span> tb_partition2 <span class="keyword">partition</span>(y=<span class="string">&#x27;90&#x27;</span>,m=<span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span>  inpath <span class="string">&quot;/root/b.txt&quot;</span>  <span class="keyword">into</span>  <span class="keyword">table</span> tb_partition2 <span class="keyword">partition</span>(y=<span class="string">&#x27;90&#x27;</span>,m=<span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span>  inpath <span class="string">&quot;/root/c.txt&quot;</span>  <span class="keyword">into</span>  <span class="keyword">table</span> tb_partition2 <span class="keyword">partition</span>(y=<span class="string">&#x27;95&#x27;</span>,m=<span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span>  inpath <span class="string">&quot;/root/d.txt&quot;</span>  <span class="keyword">into</span>  <span class="keyword">table</span> tb_partition2 <span class="keyword">partition</span>(y=<span class="string">&#x27;95&#x27;</span>,m=<span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_partition2  <span class="keyword">where</span> y=<span class="string">&#x27;90&#x27;</span> <span class="keyword">and</span> m=<span class="string">&#x27;01&#x27;</span>;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>修改表和删除表</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重命名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">RENAME</span> <span class="keyword">TO</span> new_table_name</span><br><span class="line"><span class="comment">#删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> dept_partition;</span><br></pre></td></tr></table></figure>



<h2 id="DML-数据操纵语言详解"><a href="#DML-数据操纵语言详解" class="headerlink" title="DML 数据操纵语言详解"></a>DML 数据操纵语言详解</h2><h4 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#向表中装载数据</span><br><span class="line"></span><br><span class="line">#语法</span><br><span class="line">hive&gt; load data [local] inpath &#39;&#x2F;opt&#x2F;module&#x2F;datas&#x2F;student.txt&#39; overwrite | into table student [partition (partcol1&#x3D;val1,…)];</span><br><span class="line">#字段的解释</span><br><span class="line"></span><br><span class="line">load data:表示加载数据</span><br><span class="line">local:表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</span><br><span class="line">inpath:表示加载数据的路径</span><br><span class="line">overwrite:表示覆盖表中已有数据，否则表示追加</span><br><span class="line">into table:表示加载到哪张表</span><br><span class="line">student:表示具体的表</span><br><span class="line">partition:表示上传到指定分区</span><br><span class="line"></span><br><span class="line">#通过查询语句向表中插入数据</span><br><span class="line">insert overwrite table student partition(month&#x3D;&#39;201708&#39;) select id, name from student where month&#x3D;&#39;201709&#39;;</span><br><span class="line"></span><br><span class="line">#查询语句中创建表并加载数据</span><br><span class="line">create table if not exists student3 as select id, name from student;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询结果导入到本地</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">&#x27;/opt/module/datas/export/student&#x27;</span> <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询结果格式化导入本地</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">&#x27;/opt/module/datas/export/student1&#x27;</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>             </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询结果导入到HDFS</span></span><br><span class="line"><span class="keyword">insert</span> overwrite  <span class="keyword">directory</span> <span class="string">&#x27;/opt/module/datas/export/student1&#x27;</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span>             </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Truncate只能删除管理表，不能删除外部表中数据</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure>



<h2 id="DQL-数据查询语言详解"><a href="#DQL-数据查询语言详解" class="headerlink" title="DQL 数据查询语言详解"></a>DQL 数据查询语言详解</h2><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><ul>
<li><p>常用函数</p>
</li>
<li><p>算术运算符</p>
</li>
<li><p>Limit</p>
</li>
<li><p><strong>空值的处理</strong></p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># count( ) count(*) 区别</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>( ) <span class="keyword">from</span> Company <span class="comment">--包括空值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> Company <span class="comment">--不包括空值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有count不忽略空值,例如avg函数把空值设置为0</span></span><br><span class="line"> <span class="keyword">avg</span>(<span class="keyword">IsNull</span>(score，<span class="number">0</span>)） <span class="keyword">as</span> ’Average Score‘</span><br></pre></td></tr></table></figure>



<h4 id="where语句"><a href="#where语句" class="headerlink" title="where语句"></a>where语句</h4><ul>
<li><p>between and</p>
</li>
<li><p>in is null   exist</p>
</li>
<li><p>like rlike</p>
<ul>
<li>% 代表零个或多个字符(任意个字符)。</li>
<li>_ 代表一个字符。</li>
<li>rlike支持正则表达式</li>
</ul>
</li>
<li><p>逻辑运算符</p>
</li>
</ul>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><ul>
<li><p>group by</p>
</li>
<li><p>having </p>
</li>
</ul>
<h4 id="join连接"><a href="#join连接" class="headerlink" title="join连接"></a>join连接</h4><ul>
<li><p>Hive支持通常的SQL JOIN语句，但是只支持等值连接，不支持非等值连接</p>
</li>
<li><p>join连接谓词中不支持or</p>
</li>
</ul>
<h4 id="基础SQL案例"><a href="#基础SQL案例" class="headerlink" title="基础SQL案例"></a>基础SQL案例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL互联网50题hive实现</span></span><br></pre></td></tr></table></figure>



<h4 id="排序语法"><a href="#排序语法" class="headerlink" title="排序语法"></a>排序语法</h4><ul>
<li><p>全局排序(order by )</p>
<ol>
<li><p>Order By：全局排序，一个Reducer</p>
</li>
<li><p>ASC（ascend）: 升序（默认）</p>
</li>
<li><p>DESC（descend）: 降序</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>每个MapReduce内部排序（Sort By）</p>
<ol>
<li><p>set mapreduce.job.reduces=3;(设置reduce数目)</p>
</li>
<li><p>set mapreduce.job.reduces;(查看reduce数目)</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>分区排序（Distribute By）</p>
<ol>
<li><p>类似MR中partition，进行分区，结合sort by使用</p>
</li>
<li><p>Hive要求DISTRIBUTE BY语句要写在SORT BY语句之前</p>
</li>
<li><p>要分配多reduce进行处理，否则无法看到distribute by的效果。</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>Cluster By</p>
<ol>
<li><p>当distribute by和sorts by字段相同时，可以使用cluster by方式。</p>
</li>
<li><p>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>
</li>
</ol>
</li>
</ul>
<h4 id="分桶与抽样查询"><a href="#分桶与抽样查询" class="headerlink" title="分桶与抽样查询"></a>分桶与抽样查询</h4><ul>
<li><p>概念:</p>
<ol>
<li><p><strong>分区针对的是数据的存储路径；分桶针对的是数据文件,</strong></p>
</li>
<li><p>分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区，特别是之前所提到过的要确定合适的划分大小这个疑虑</p>
</li>
<li><p>分桶对数据的处理比分区更加细粒度化；</p>
</li>
<li><p>分桶和分区两者不干扰，可以把分区表进一步分桶；</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">create table stu_buck(id int, name string)</span><br><span class="line">clustered by(id)</span><br><span class="line">into 4 buckets</span><br><span class="line">row format delimited fields terminated by &#39;\t&#39;;</span><br><span class="line"></span><br><span class="line">set hive.enforce.bucketing &#x3D; true;</span><br><span class="line"></span><br><span class="line">load data local inpath &#39;&#x2F;root&#x2F;e.txt&#39; into table</span><br><span class="line">stu_buck;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>分桶抽样查询</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#示例</span><br><span class="line">select * from stu_buck tablesample(bucket 1 out of 4 on id);</span><br><span class="line"></span><br><span class="line">#含义的说明</span><br><span class="line"></span><br><span class="line">tablesample是抽样语句，语法：TABLESAMPLE(BUCKET x OUT OF y) </span><br><span class="line">y必须是table总bucket数的倍数或者因子,例如:例如，table总共分了4份，当y&#x3D;2时，抽取(4&#x2F;2&#x3D;)2个bucket的数据，当y&#x3D;8时，抽取(4&#x2F;8&#x3D;)1&#x2F;2个bucket的数据。</span><br><span class="line">x表示从哪个bucket开始抽取，如果需要取多个分区，以后的分区号为当前分区号加上y,例如:table总bucket数为4，tablesample(bucket 1 out of 2)，表示总共抽取（4&#x2F;2&#x3D;）2个bucket的数据，抽取第1(x)个和第3(x y)个bucket的数据。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="动态分区和静态分区详解"><a href="#动态分区和静态分区详解" class="headerlink" title="动态分区和静态分区详解"></a>动态分区和静态分区详解</h2><p>首先是要创建静态分区表；然后将表设置为非严格模式；再次创建动态分区表，并加载数据。</p>
<p>加载数据的时候，是按照静态分区的模式，将数据加载到动态分区中去。</p>
<p><strong>注意事项要开启yarn不然报错:org.apache.hadoop.hive.ql.exec.mr.MapRedTask</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例</span></span><br><span class="line"><span class="comment">#数据user.txt</span></span><br><span class="line">u001 ZSS 23 M beijing</span><br><span class="line">u002 YMM 33 F nanjing</span><br><span class="line">u003 LSS 43 M beijing</span><br><span class="line">u004 ZY 23 F beijing</span><br><span class="line">u005 ZM 23 M beijing</span><br><span class="line">u006 CL 23 M dongjing</span><br><span class="line">u007 LX 23 F beijing</span><br><span class="line">u008 YZ 23 M beijing</span><br><span class="line">u009 YM 23 F nanjing</span><br><span class="line">u010 XM 23 M beijing</span><br><span class="line">u011 XD 23 F beijing</span><br><span class="line">u012 LH 23 M dongjing</span><br><span class="line"></span><br><span class="line"><span class="comment">#建普通表语句</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span>  <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>  tb_user(</span><br><span class="line">uid <span class="keyword">string</span> ,</span><br><span class="line"><span class="keyword">name</span>  <span class="keyword">string</span> ,</span><br><span class="line">age <span class="built_in">int</span> ,</span><br><span class="line">gender <span class="keyword">string</span> ,</span><br><span class="line">address <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span>  <span class="keyword">terminated</span> <span class="keyword">by</span>  <span class="string">&quot; &quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">##加载数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span>  inpath  <span class="string">&quot;/root/user.txt&quot;</span>  <span class="keyword">into</span> <span class="keyword">table</span>  tb_user ;</span><br><span class="line"></span><br><span class="line"><span class="comment">##创建目标表</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span>  <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>  tb_p_user(</span><br><span class="line">uid <span class="keyword">string</span> ,</span><br><span class="line"><span class="keyword">name</span>  <span class="keyword">string</span> ,</span><br><span class="line">age <span class="built_in">int</span> ,</span><br><span class="line">gender <span class="keyword">string</span> ,</span><br><span class="line">address <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">partitioned  <span class="keyword">by</span> (addr <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span>  <span class="keyword">terminated</span> <span class="keyword">by</span>  <span class="string">&quot; &quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启动态分区设置</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition=<span class="literal">true</span> ;</span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode= nonstrict;  可以从普通表中导入数据</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入数据(这里是全部插入,也可以插入普通表的部分字段)</span></span><br><span class="line">普通表5个字段</span><br><span class="line">分区表 5个主字段 1 个分区字段</span><br><span class="line">插入数据的时候字段个数类型一致  最后一个字段就是分区字段 </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_p_user <span class="keyword">partition</span>(addr) <span class="keyword">select</span> uid , <span class="keyword">name</span> , age , gender , address,address  <span class="keyword">from</span>  tb_user ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="窗口函数总结"><a href="#窗口函数总结" class="headerlink" title="窗口函数总结"></a>窗口函数总结</h2><h4 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#窗口函数的语法</span></span><br><span class="line"></span><br><span class="line">over关键字用来指定函数执行的窗口范围，若后面括号中什么都不写，则意味着窗口包含满足WHERE条件的所有行，窗口函数基于所有行进行计算；如果不为空，则支持以下4中语法来设置窗口。</span><br><span class="line">①window_name：给窗口指定一个别名。如果SQL中涉及的窗口较多，采用别名可以看起来更清晰易读；</span><br><span class="line">②PARTITION BY 子句：窗口按照哪些字段进行分组，窗口函数在不同的分组上分别执行；</span><br><span class="line">③ORDER BY子句：按照哪些字段进行排序，窗口函数将按照排序后的记录顺序进行编号；</span><br><span class="line">④FRAME子句：FRAME是当前分区的一个子集，子句用来定义子集的规则，通常用来作为滑动窗口使用</span><br></pre></td></tr></table></figure>



<ol>
<li> 偏移量函数:lag lead</li>
</ol>
<p>​           lag(列名,往前的行数,[行数为null时的默认值，不指定为null])，可以计算用户上次购买时间，或者用户下次购买时间。</p>
<p>​           lead(列名,往后的行数,[行数为null时的默认值，不指定为null])</p>
<ol start="2">
<li>first_value 和 last_value</li>
</ol>
<p>​           first_value取分组内排序后，截止到当前行，第一个值<br>​           last_value取分组内排序后，截止到当前行，最后一个值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>,</span><br><span class="line"><span class="keyword">first_value</span>(orderdate) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> time1,</span><br><span class="line"><span class="keyword">last_value</span>(orderdate) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> time2</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">order</span></span><br><span class="line"><span class="comment">#展示</span></span><br><span class="line"><span class="keyword">name</span>    orderdate   <span class="keyword">cost</span>    time1   time2</span><br><span class="line">jack    <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">10</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">jack    <span class="number">2015</span><span class="number">-01</span><span class="number">-05</span>  <span class="number">46</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-05</span></span><br><span class="line">jack    <span class="number">2015</span><span class="number">-01</span><span class="number">-08</span>  <span class="number">55</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-08</span></span><br><span class="line">jack    <span class="number">2015</span><span class="number">-02</span><span class="number">-03</span>  <span class="number">23</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2015</span><span class="number">-02</span><span class="number">-03</span></span><br><span class="line">jack    <span class="number">2015</span><span class="number">-04</span><span class="number">-06</span>  <span class="number">42</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-06</span></span><br><span class="line">mart    <span class="number">2015</span><span class="number">-04</span><span class="number">-08</span>  <span class="number">62</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-08</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-08</span></span><br><span class="line">mart    <span class="number">2015</span><span class="number">-04</span><span class="number">-09</span>  <span class="number">68</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-08</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-09</span></span><br><span class="line">mart    <span class="number">2015</span><span class="number">-04</span><span class="number">-11</span>  <span class="number">75</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-08</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-11</span></span><br><span class="line">mart    <span class="number">2015</span><span class="number">-04</span><span class="number">-13</span>  <span class="number">94</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-08</span>  <span class="number">2015</span><span class="number">-04</span><span class="number">-13</span></span><br><span class="line">neil    <span class="number">2015</span><span class="number">-05</span><span class="number">-10</span>  <span class="number">12</span>  <span class="number">2015</span><span class="number">-05</span><span class="number">-10</span>  <span class="number">2015</span><span class="number">-05</span><span class="number">-10</span></span><br><span class="line">neil    <span class="number">2015</span><span class="number">-06</span><span class="number">-12</span>  <span class="number">80</span>  <span class="number">2015</span><span class="number">-05</span><span class="number">-10</span>  <span class="number">2015</span><span class="number">-06</span><span class="number">-12</span></span><br><span class="line">tony    <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">15</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span></span><br><span class="line">tony    <span class="number">2015</span><span class="number">-01</span><span class="number">-04</span>  <span class="number">29</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-04</span></span><br><span class="line">tony    <span class="number">2015</span><span class="number">-01</span><span class="number">-07</span>  <span class="number">50</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">2015</span><span class="number">-01</span><span class="number">-07</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a><strong>序列函数</strong></h4><ul>
<li><p>rank():1,2,2,2,5,6</p>
</li>
<li><p>dense_rank():1,2,2,3,4,4,5</p>
</li>
<li><p>row_number():1,2,3,4,5,6</p>
</li>
<li><p>ntile(n):用于将分组数据按照顺序切分成n片，返回当前切片值</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ntile(n) 支持over()</span><br></pre></td></tr></table></figure>



<h4 id="控制窗口大小的使用"><a href="#控制窗口大小的使用" class="headerlink" title="控制窗口大小的使用"></a>控制窗口大小的使用</h4><p><strong>PRECEDING：往前<br>FOLLOWING：往后<br>CURRENT ROW：当前行<br>UNBOUNDED：起点，UNBOUNDED PRECEDING 表示从前面的起点， UNBOUNDED FOLLOWING：表示到后面的终点</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#例如</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>() <span class="keyword">as</span> fullagg, <span class="comment">--所有行相加</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span>) <span class="keyword">as</span> fullaggbyname, <span class="comment">--按name分组，组内数据相加</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> fabno, <span class="comment">--按name分组，组内数据累加 </span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span>) <span class="keyword">as</span> mw1   <span class="comment">--和fabno一样,由最前面的起点到当前行的聚合 </span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span>) <span class="keyword">as</span> mw2,   <span class="comment">--当前行和前面一行做聚合 </span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>) <span class="keyword">as</span> mw3,   <span class="comment">--当前行和前边一行及后面一行 </span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="keyword">row</span> <span class="keyword">and</span> <span class="keyword">unbounded</span> <span class="keyword">following</span>) <span class="keyword">as</span> mw4  <span class="comment">--当前行及后面所有行 </span></span><br><span class="line"><span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">following</span>) 窗口范围为当前行的数据幅度减<span class="number">2</span>加<span class="number">2</span>后的范围内的数据求和。</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">order</span>; </span><br></pre></td></tr></table></figure>



<h4 id="SQL习题-窗口函数"><a href="#SQL习题-窗口函数" class="headerlink" title="SQL习题-窗口函数"></a>SQL习题-窗口函数</h4><h5 id="topN案例"><a href="#topN案例" class="headerlink" title="topN案例"></a>topN案例</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL</span></span><br><span class="line">有表score</span><br><span class="line">想知道学生成绩排名前几的科目</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">*,</span><br><span class="line">row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> subject <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) rmp</span><br><span class="line"><span class="keyword">from</span> score</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">where</span> t.rmp&lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h5 id="连续登陆案例"><a href="#连续登陆案例" class="headerlink" title="连续登陆案例"></a>连续登陆案例</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sql</span></span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">1,2020-01-01</span><br><span class="line">1,2020-01-02</span><br><span class="line">1,2020-01-03</span><br><span class="line">1,2020-01-04</span><br><span class="line">1,2020-01-07</span><br><span class="line">1,2020-01-08</span><br><span class="line">9,2020-01-08</span><br><span class="line">7,2020-01-15</span><br><span class="line">3,2020-01-09</span><br><span class="line">4,2020-01-12</span><br><span class="line">1,2020-01-09</span><br><span class="line">2,2020-02-09</span><br><span class="line">2,2020-02-10</span><br><span class="line">2,2020-02-11</span><br><span class="line">2,2020-02-12</span><br><span class="line">2,2020-02-14</span><br><span class="line">2,2020-02-15</span><br><span class="line">4,2020-01-11</span><br><span class="line">4,2020-01-13</span><br><span class="line">4,2020-01-15</span><br><span class="line"></span><br><span class="line"><span class="comment">#建表与SQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sigin1(</span><br><span class="line">userid <span class="built_in">int</span>,</span><br><span class="line">sigindate <span class="keyword">string</span></span><br><span class="line">)<span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&#x27;/root/user.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> sigin1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法一,使用序列函数,date_sub()查询连续登陆天数大于三天的用户(没有去重,假设同一个用户在同一天登陆俩次,分组解决此问题)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">userid,<span class="keyword">result</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">userid,sigindate,<span class="keyword">date_sub</span>(sigindate,<span class="built_in">number</span>) <span class="keyword">as</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">userid,sigindate,</span><br><span class="line"><span class="keyword">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> userid <span class="keyword">order</span> <span class="keyword">by</span> sigindate) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">from</span> sigin1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  userid,sigindate )t1)t2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">result</span>,userid</span><br><span class="line"><span class="keyword">having</span>  <span class="keyword">count</span>(<span class="keyword">result</span>) &gt;=<span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> userid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二,使用偏移函数,lag函数 偏移3个单位如果  date_sub()日期偏移3相等那么用户登录的天数就是连续3天</span></span><br><span class="line"><span class="comment">#这个方法可以求但是在这个题目中是不行的,因为lag是偏移函数,开始的三个日期前面没有日期,得到的结果偏移为0</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">* ,<span class="keyword">date_sub</span>(sigindate,<span class="number">3</span>) <span class="keyword">as</span> <span class="string">`date`</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">userid,sigindate,lag(sigindate,<span class="number">3</span>,<span class="number">0</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> userid <span class="keyword">order</span> <span class="keyword">by</span> sigindate) <span class="keyword">as</span> <span class="string">`date`</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">userid,sigindate</span><br><span class="line"><span class="keyword">from</span> sigin1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> userid, sigindate)t1)t2</span><br><span class="line"><span class="keyword">where</span> sigindate <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">and</span> <span class="keyword">date_sub</span>(sigindate,<span class="number">3</span>) = <span class="string">`date`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="基础SQL案例-1"><a href="#基础SQL案例-1" class="headerlink" title="基础SQL案例"></a>基础SQL案例</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL</span></span><br><span class="line"><span class="comment">#测试数据</span></span><br><span class="line">jack,2017-01-01,10</span><br><span class="line">tony,2017-01-02,15</span><br><span class="line">jack,2017-02-03,23</span><br><span class="line">tony,2017-01-04,29</span><br><span class="line">jack,2017-01-05,46</span><br><span class="line">jack,2017-04-06,42</span><br><span class="line">tony,2017-01-07,50</span><br><span class="line">jack,2017-01-08,55</span><br><span class="line">mart,2017-04-08,62</span><br><span class="line">mart,2017-04-09,68</span><br><span class="line">neil,2017-05-10,12</span><br><span class="line">mart,2017-04-11,75</span><br><span class="line">neil,2017-06-12,80</span><br><span class="line">mart,2017-04-13,94</span><br><span class="line"></span><br><span class="line"><span class="comment">#建表与需求</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> business</span><br><span class="line">(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>, </span><br><span class="line">orderdate <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">cost</span> <span class="built_in">int</span></span><br><span class="line">)<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载数据</span></span><br><span class="line"><span class="keyword">load</span>  <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/business.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> business;</span><br><span class="line"></span><br><span class="line">1、查询在2017年4月份购买过的顾客及总人数</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">collect_set(<span class="keyword">name</span>) <span class="keyword">as</span> people,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">name</span>) <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">name</span>,<span class="keyword">substr</span>(orderdate,<span class="number">1</span>,<span class="number">7</span>) <span class="keyword">as</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">from</span> business</span><br><span class="line"><span class="keyword">where</span>  <span class="keyword">substr</span>(orderdate,<span class="number">1</span>,<span class="number">7</span>) = <span class="string">&#x27;2017-04&#x27;</span></span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t1.result;</span><br><span class="line"></span><br><span class="line">2、查询顾客的月购买总额,查询月购买明细</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">name</span>,total_amount</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*,</span><br><span class="line">row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> ,<span class="keyword">substr</span>(orderdate,<span class="number">1</span>,<span class="number">7</span>)) <span class="keyword">as</span> <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span>,<span class="keyword">substr</span>(orderdate,<span class="number">1</span>,<span class="number">7</span>) ) total_amount</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">business) t1 )t2</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">rank</span> =<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#月购买明细</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span>,<span class="keyword">substr</span>(orderdate,<span class="number">1</span>,<span class="number">7</span>)) <span class="keyword">as</span> total_amount</span><br><span class="line"><span class="keyword">from</span> business;</span><br><span class="line"></span><br><span class="line">3、查询顾客的购买明细及到目前为止每个顾客购买总金额</span><br><span class="line"><span class="keyword">select</span> *,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span>  <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span> )</span><br><span class="line"><span class="keyword">from</span> business;</span><br><span class="line"></span><br><span class="line">4、查询顾客上次的购买时间<span class="comment">----lag()over()偏移量分析函数的运用</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*,</span><br><span class="line">lag(orderdate,<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> Thelastimetobuy</span><br><span class="line"><span class="keyword">from</span> business;</span><br><span class="line"></span><br><span class="line">5、查询前20%时间的订单信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">name</span>,orderdate,<span class="keyword">cost</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*,</span><br><span class="line">ntile(<span class="number">5</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span>  orderdate) <span class="keyword">as</span> portion</span><br><span class="line"><span class="keyword">from</span> business) t1</span><br><span class="line"><span class="keyword">where</span> portion =<span class="number">1</span>;</span><br></pre></td></tr></table></figure>





<h2 id="列转行、行转列"><a href="#列转行、行转列" class="headerlink" title="列转行、行转列"></a>列转行、行转列</h2><h4 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h4><ul>
<li>函数的说明:<ul>
<li><strong>CONCAT(STRING A ,STRINFG B):返回字符串的连接后的结果</strong></li>
<li><strong>CONCAT_WS(separator, str1, str2,…):这是一个特殊的CONCAT(),第一个参数是分隔符</strong></li>
<li><strong>COLLECT_SET():函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段</strong></li>
<li><strong>CONCAT_WS(SEPARATOR ,COLLECT_SET(column)) ===&gt;GROUP_CONCAT（）函数</strong></li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL</span></span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">孙尚香,白羊座,A</span><br><span class="line">司马懿,射手座,A</span><br><span class="line">吕布,白羊座,B</span><br><span class="line">貂蝉,白羊座,A</span><br><span class="line">许褚,射手座,A</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求</span></span><br><span class="line">射手座,A    司马懿|许褚</span><br><span class="line">白羊座,A    孙尚香|貂蝉</span><br><span class="line">白羊座,B    吕布</span><br><span class="line"></span><br><span class="line"><span class="comment">#建表和SQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person_info(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">constellation <span class="keyword">string</span>,</span><br><span class="line">blood_type <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/f.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> person_info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">//<span class="keyword">concat</span>(constellation,<span class="string">&quot;,&quot;</span>,blood_type),</span><br><span class="line"><span class="keyword">concat_ws</span>(<span class="string">&quot;,&quot;</span>,constellation,blood_type) <span class="keyword">as</span> <span class="keyword">list</span>,</span><br><span class="line"><span class="keyword">concat_ws</span>(<span class="string">&quot;|&quot;</span>,collect_set(<span class="keyword">name</span>)) <span class="keyword">as</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">person_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  constellation,blood_type;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h4><ul>
<li>函数的说明<ul>
<li>EXPLODE(col)：将hive一列中复杂的array或者map结构拆分成多行。</li>
<li>LATERAL VIEW:用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合</li>
<li>split(str , 分隔符):返回一个数组</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL</span></span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">《疑犯追踪》 悬疑,动作,科幻,剧情</span><br><span class="line">《Lie to me》	悬疑,警匪,动作,心理,剧情</span><br><span class="line">《战狼2》 战争,动作,灾难</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求</span></span><br><span class="line">《疑犯追踪》      悬疑</span><br><span class="line">《疑犯追踪》      动作</span><br><span class="line">《疑犯追踪》      科幻</span><br><span class="line">《疑犯追踪》      剧情</span><br><span class="line">《Lie to me》   悬疑</span><br><span class="line">《Lie to me》   警匪</span><br><span class="line">《Lie to me》   动作</span><br><span class="line">《Lie to me》   心理</span><br><span class="line">《Lie to me》   剧情</span><br><span class="line">《战狼2》        战争</span><br><span class="line">《战狼2》        动作</span><br><span class="line">《战狼2》        灾难</span><br><span class="line"></span><br><span class="line"><span class="comment">#建表与SQL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> movie_info(</span><br><span class="line">movie <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">category</span> <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;|&quot;</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/g.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> movie_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">#lateral view explode(category) table_emp相当于一个虚拟表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">movie</span><br><span class="line"><span class="keyword">result</span></span><br><span class="line"><span class="keyword">from</span> movie_info</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span></span><br><span class="line"><span class="keyword">explode</span>(<span class="keyword">category</span>) <span class="keyword">result</span> <span class="keyword">as</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#另一种建表,使用split()切分为数组形式</span></span><br></pre></td></tr></table></figure>



<h2 id="case-when语法、if语法"><a href="#case-when语法、if语法" class="headerlink" title="case when语法、if语法"></a>case when语法、if语法</h2><h4 id="case-when的语法"><a href="#case-when的语法" class="headerlink" title="case when的语法"></a>case when的语法</h4><ul>
<li>CASE 字段  WHEN 值1 THEN 值1 [WHEN 值2 THEN 值2]  [ELSE 值]  END </li>
<li>CASE WHEN 条件表达式 THEN 值1 [WHEN 条件表达式 [and or] 条件表达式THEN 值2]  [ELSE 值]  END</li>
</ul>
<h4 id="if的语法"><a href="#if的语法" class="headerlink" title="if的语法"></a>if的语法</h4><ul>
<li>if( , , )</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL</span></span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">悟空,A,男</span><br><span class="line">娜娜,A,男</span><br><span class="line">宋宋,B,男</span><br><span class="line">凤姐,A,女</span><br><span class="line">热巴,B,女</span><br><span class="line">慧慧,B,女</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求</span></span><br><span class="line">dpt   男      女</span><br><span class="line">A     2       1</span><br><span class="line">B     1       2</span><br><span class="line"></span><br><span class="line"><span class="comment">#建表与SQL(一)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_case_when_demo(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span> ,</span><br><span class="line">dname <span class="keyword">string</span> ,</span><br><span class="line">gender <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/h.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> tb_case_when_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">dname,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> gender <span class="keyword">when</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span>  <span class="keyword">nan</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> gender <span class="keyword">when</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> nv</span><br><span class="line"><span class="keyword">from</span> tb_case_when_demo</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  dname;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL(二)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">dname,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> gender =<span class="string">&#x27;男&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="keyword">nan</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> gender = <span class="string">&#x27;女&#x27;</span> <span class="keyword">then</span>  <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> nv</span><br><span class="line"><span class="keyword">from</span> tb_case_when_demo</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dname;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL(三)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">dname,</span><br><span class="line"><span class="keyword">sum</span>(<span class="string">`if`</span>(gender=<span class="string">&#x27;男&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>)) <span class="keyword">as</span> <span class="keyword">nan</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="string">`if`</span>(gender = <span class="string">&#x27;女&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>)) <span class="keyword">as</span> nv</span><br><span class="line"><span class="keyword">from</span> tb_case_when_demo</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  dname;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL练习题</span></span><br><span class="line"><span class="comment">#数据与需求</span></span><br><span class="line">https://blog.csdn.net/qq_37933018/article/details/106878128</span><br><span class="line"><span class="comment">#一个SQL项目</span></span><br><span class="line">https://blog.csdn.net/BeiisBei/article/details/103672522</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="基础SQL案例-2"><a href="#基础SQL案例-2" class="headerlink" title="基础SQL案例"></a>基础SQL案例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL</span></span><br><span class="line"><span class="comment">#数据与需求</span></span><br><span class="line">(用户工资组成表,基本工资,基金,提成)</span><br><span class="line">1,2000,3000,1500,1</span><br><span class="line">2,5000,500,1000,2</span><br><span class="line">3,1500,1000,3000,2</span><br><span class="line">4,3000,6000,8000,3</span><br><span class="line">5,1500,2000,1800,1</span><br><span class="line">6,2500,1000,1900,1</span><br><span class="line">(部门表)</span><br><span class="line">1,销售</span><br><span class="line">2,技术</span><br><span class="line">3,行政</span><br><span class="line">(员工信息表)</span><br><span class="line">1,zs,M,28</span><br><span class="line">2,ww,F,36</span><br><span class="line">3,zl,F,48</span><br><span class="line">4,pp,M,44</span><br><span class="line">5,wb,M,32</span><br><span class="line">6,TQ,F,32</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> gz(</span><br><span class="line">uid <span class="built_in">int</span>,</span><br><span class="line">jb <span class="built_in">int</span>,</span><br><span class="line">jj <span class="built_in">int</span>,</span><br><span class="line">tc <span class="built_in">int</span>,</span><br><span class="line">deptno <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/gz.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> gz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> bm(</span><br><span class="line">deptno <span class="keyword">string</span> ,</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/bm.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> bm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> yg(</span><br><span class="line">uid <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">gender <span class="keyword">string</span>,</span><br><span class="line">age <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/yg.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> yg;</span><br><span class="line"></span><br><span class="line">1.求出公司中每个员工的姓名 和 三类收入中最高的那种收入的类型(greatest()函数)</span><br><span class="line"><span class="keyword">with</span> x <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">uid, <span class="keyword">greatest</span>(jb, jj, tc)<span class="keyword">as</span> <span class="string">`max`</span>,</span><br><span class="line">//<span class="keyword">case</span>  <span class="keyword">when</span>   <span class="keyword">greatest</span>(jb, jj, tc) = jb <span class="keyword">then</span> <span class="string">&#x27;jb&#x27;</span>  <span class="keyword">when</span> <span class="keyword">greatest</span>(jb, jj, tc) = jj <span class="keyword">then</span> <span class="string">&#x27;jj&#x27;</span> <span class="keyword">when</span>  <span class="keyword">greatest</span>(jb, jj, tc) = tc <span class="keyword">then</span> <span class="string">&#x27;tc&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;_&#x27;</span> <span class="keyword">end</span>  <span class="keyword">as</span>  gz_category,</span><br><span class="line"><span class="keyword">case</span>   <span class="keyword">greatest</span>(jb, jj, tc)  <span class="keyword">when</span> jb <span class="keyword">then</span> <span class="string">&#x27;jb&#x27;</span> <span class="keyword">when</span>  jj <span class="keyword">then</span> <span class="string">&#x27;jj&#x27;</span> <span class="keyword">when</span> tc <span class="keyword">then</span> <span class="string">&#x27;tc&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;_&#x27;</span> <span class="keyword">end</span>  <span class="keyword">as</span> gz_category1</span><br><span class="line"><span class="keyword">from</span> gz )</span><br><span class="line"><span class="keyword">select</span>  yg.uid,<span class="keyword">max</span>,gz_category1</span><br><span class="line"><span class="keyword">from</span>  yg  <span class="keyword">join</span>  x <span class="keyword">on</span> yg.uid = x.uid;</span><br><span class="line"></span><br><span class="line">2.求出公司中每个岗位的薪资总和</span><br><span class="line"><span class="keyword">with</span> x <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">deptno,</span><br><span class="line"><span class="keyword">sum</span>(jj+tc+jb)  sum_gz</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">gz</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">bm.name,x.sum_gz</span><br><span class="line"><span class="keyword">from</span> bm</span><br><span class="line"><span class="keyword">join</span>  x <span class="keyword">on</span> x.deptno = bm.deptno;</span><br><span class="line"></span><br><span class="line">3.求出公司中不同性别、不同年龄阶段（20-30,31-40,41-50）的员工薪资总和</span><br><span class="line"><span class="keyword">with</span> x <span class="keyword">as</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">uid,</span><br><span class="line">gender,</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> age&gt;<span class="number">20</span> <span class="keyword">and</span> age &lt;=<span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;20-30&#x27;</span> <span class="keyword">when</span> age&gt;<span class="number">30</span> <span class="keyword">and</span> age&lt;=<span class="number">40</span> <span class="keyword">then</span> <span class="string">&#x27;31-40&#x27;</span> <span class="keyword">when</span> age &gt; <span class="number">41</span> <span class="keyword">and</span> age &lt;=<span class="number">50</span> <span class="keyword">then</span> <span class="string">&#x27;41-50&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;_&#x27;</span> <span class="keyword">end</span>  <span class="keyword">as</span> stage</span><br><span class="line"><span class="keyword">from</span> yg )</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">gender,stage,<span class="keyword">sum</span>(jb+jj+tc) <span class="keyword">as</span> <span class="string">`max`</span></span><br><span class="line"><span class="keyword">from</span>  gz  <span class="keyword">join</span>  x  <span class="keyword">on</span> gz.uid = x.uid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  x.gender,x.stage</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> stage <span class="keyword">desc</span> ;</span><br></pre></td></tr></table></figure>



<h2 id="内置函数集合"><a href="#内置函数集合" class="headerlink" title="内置函数集合"></a>内置函数集合</h2><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><ul>
<li><p>substr()</p>
<p><strong>substr(a,b)：从字符串a中，第b位开始取，取右边所有的字符</strong></p>
<p><strong>substr(a,b,c)：从字符串a中，第b为开始取，取c个字符,b可为负数从后面数</strong></p>
</li>
<li><p>填充</p>
<p><strong>lpad（左填充）rpad（右填充）</strong></p>
<p>例如:select lpad(‘abc’,10,’<em>‘); 往左填充10个\</em></p>
</li>
</ul>
<h4 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h4><ul>
<li>str_to_map(‘a:1,b:2,c:3’);字符串转map</li>
<li>select size(str_to_map(‘a:1,b:2,c:3’));返回map的元素个数</li>
<li>map_keys(str_to_map(‘a:1,b:2’));返回key</li>
</ul>
<h4 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h4><ul>
<li>cast():select cast(‘2018-06-28’ as date);字符串转日期类型</li>
</ul>
<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ul>
<li><strong>unix_timestamp()</strong> 日期转换为当前时间戳</li>
<li>**from_unixtime(t1,’yyyy-MM-dd HH:mm:ss’)**时间戳转变为日期格式</li>
<li><strong>from_unixtime(unix_timestamp(date_created),’yyyy-MM-dd HH:mm:ss’)`来规范时间的格式</strong></li>
</ul>
<h2 id="Hive自定义函数详解"><a href="#Hive自定义函数详解" class="headerlink" title="Hive自定义函数详解"></a>Hive自定义函数详解</h2><p>（UDF、UDAF、UDTF）</p>
<h2 id="MACRO-宏-的使用"><a href="#MACRO-宏-的使用" class="headerlink" title="MACRO (宏) 的使用"></a>MACRO (宏) 的使用</h2><h2 id="执行流程分析"><a href="#执行流程分析" class="headerlink" title="执行流程分析"></a>执行流程分析</h2><h2 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h2><h4 id="常用优化策略"><a href="#常用优化策略" class="headerlink" title="常用优化策略"></a>常用优化策略</h4><ul>
<li>减少job数量</li>
<li>数据量较大的情况下，慎用 count(distinct)，group by 容易产生倾斜问题</li>
<li>合并小文件</li>
<li>解决数据倾斜</li>
</ul>
<h4 id="笛卡尔积与MapJoin的使用"><a href="#笛卡尔积与MapJoin的使用" class="headerlink" title="笛卡尔积与MapJoin的使用"></a>笛卡尔积与MapJoin的使用</h4><h4 id="怎么写in、exists"><a href="#怎么写in、exists" class="headerlink" title="怎么写in、exists"></a>怎么写in、exists</h4><ul>
<li>hive 的一个高效替代方案：left semi join</li>
</ul>
<h4 id="小文件的合并"><a href="#小文件的合并" class="headerlink" title="小文件的合并"></a>小文件的合并</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常用设置</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapfiles = <span class="literal">true</span> <span class="comment">##在 map only 的任务结束时合并小文件</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapredfiles = <span class="literal">false</span> <span class="comment">## true 时在 MapReduce 的任务结束时合并小文件</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.size.per.task = <span class="number">256</span>*<span class="number">1000</span>*<span class="number">1000</span> <span class="comment">##合并文件的大小</span></span><br><span class="line"><span class="keyword">set</span> mapred.max.split.size=<span class="number">256000000</span>; <span class="comment">##每个 Map 最大分割大小</span></span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.node=<span class="number">1</span>; <span class="comment">##一个节点上 split 的最少值</span></span><br><span class="line"><span class="keyword">set</span> hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat; <span class="comment">##执行 Map 前进行小文件合并</span></span><br></pre></td></tr></table></figure>



<h2 id="解决小文件过多的方案"><a href="#解决小文件过多的方案" class="headerlink" title="解决小文件过多的方案"></a>解决小文件过多的方案</h2><h4 id="产生小文件的来源和影响"><a href="#产生小文件的来源和影响" class="headerlink" title="产生小文件的来源和影响"></a>产生小文件的来源和影响</h4><ul>
<li>来源<ul>
<li>源数据本身有很多小文件</li>
<li>动态分区会产生大量小文件</li>
<li>reduce个数越多, 小文件越多</li>
<li>按分区插入数据的时候会产生大量的小文件, 文件个数 = maptask个数 * 分区数</li>
</ul>
</li>
<li>影响<ul>
<li>从Hive的角度看，小文件会开很多map，一个map开一个JVM去执行，所以这些任务的初始化，启动，执行会浪费大量的资源，严重影响性能。</li>
<li>HDFS存储太多小文件, 会导致namenode元数据特别大, 占用太多内存, 制约了集群的扩展。</li>
</ul>
</li>
</ul>
<h4 id="解决的方法"><a href="#解决的方法" class="headerlink" title="解决的方法"></a>解决的方法</h4><ul>
<li>调参进行合并</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个Map最大输入大小(这个值决定了合并后文件的数量)</span></span><br><span class="line"><span class="keyword">set</span> mapred.max.split.size=<span class="number">256000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个节点上split的至少的大小(这个值决定了多个DataNode上的文件是否需要合并)</span></span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.node=<span class="number">100000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个交换机下split的至少的大小(这个值决定了多个交换机上的文件是否需要合并)</span></span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.rack=<span class="number">100000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行Map前进行小文件合并</span></span><br><span class="line"><span class="keyword">set</span> hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">#===设置map输出和reduce输出进行合并的相关参数：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置map端输出进行合并，默认为true</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapfiles = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置reduce端输出进行合并，默认为false</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapredfiles = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置合并文件的大小</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.size.per.task = <span class="number">256</span>*<span class="number">1000</span>*<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当输出文件的平均大小小于该值时，启动一个独立的MapReduce任务进行文件merge。</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.smallfiles.avgsize=<span class="number">16000000</span></span><br></pre></td></tr></table></figure>



<ul>
<li>distribute by rand() 将数据随机分配给 reduce</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置每个reducer处理的大小为5个G</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.reducers.bytes.per.reducer=<span class="number">5120000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用distribute by rand()将数据随机分配给reduce, 避免出现有的文件特别大, 有的文件特别小</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">partition</span>(dt)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> iteblog_tmp</span><br><span class="line"><span class="keyword">DISTRIBUTE</span> <span class="keyword">BY</span> <span class="keyword">rand</span>();</span><br></pre></td></tr></table></figure>



<ul>
<li> sequencefile 作为表存储格式，不要用 textfile，在一定程度上可以减少小文件</li>
<li>使用hadoop的archive归档</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用来控制归档是否可用</span></span><br><span class="line"><span class="keyword">set</span> hive.archive.enabled=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">#通知Hive在创建归档时是否可以设置父目录</span></span><br><span class="line"><span class="keyword">set</span> hive.archive.har.parentdir.settable=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">#控制需要归档文件的大小</span></span><br><span class="line"><span class="keyword">set</span> har.partfile.size=<span class="number">1099511627776</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用以下命令进行归档</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> srcpart <span class="keyword">ARCHIVE</span> <span class="keyword">PARTITION</span>(ds=<span class="string">&#x27;2020-04-08&#x27;</span>, hr=<span class="string">&#x27;12&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#对已归档的分区恢复为原文件</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> srcpart UNARCHIVE <span class="keyword">PARTITION</span>(ds=<span class="string">&#x27;2020-04-08&#x27;</span>, hr=<span class="string">&#x27;12&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，归档的分区不能够INSERT OVERWRITE，必须先unarchive</span></span><br></pre></td></tr></table></figure>



<ul>
<li>hadoop自带的三种小文件处理方案</li>
</ul>
<h2 id="电子商务消费行为分析-未找到数据"><a href="#电子商务消费行为分析-未找到数据" class="headerlink" title="电子商务消费行为分析(未找到数据)"></a>电子商务消费行为分析(未找到数据)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据与需求</span></span><br></pre></td></tr></table></figure>

<h2 id="textfile、sequencefile-和-rcfile"><a href="#textfile、sequencefile-和-rcfile" class="headerlink" title="textfile、sequencefile 和 rcfile"></a>textfile、sequencefile 和 rcfile</h2><table>
<thead>
<tr>
<th align="left"></th>
<th>文件存储编码格式</th>
<th align="left">建表时如何指定</th>
<th align="left">优点弊端</th>
</tr>
</thead>
<tbody><tr>
<td align="left">textfile</td>
<td>文件存储就是正常的文本格式，将表中的数据在hdfs上 以文本的格式存储，下载后可以直接查看，也可以使用cat命令查看</td>
<td align="left">1.无需指定，默认2.显示指定stored as textfile</td>
<td align="left">1. 行存储使用textfile存储文件默认每一行就是一条记录，2.可以使用任意的分隔符进行分割。3.但无压缩，所以造成存储空间大。可结合Gzip、Bzip2、Snappy等使用（系统自动检查，执行查询时自动解压），但使用这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作。3.但无压缩，所以造成存储空间大。可结合Gzip、Bzip2、Snappy等使用（系统自动检查，执行查询时自动解压），但使用这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作。</td>
</tr>
<tr>
<td align="left">sequencefile</td>
<td>在hdfs上将表中的数据以二进制格式编码，并且将数据压缩了，下载数据以后是二进制格式，不可以直接查看，无法可视化。</td>
<td align="left">1.stored as sequecefile</td>
<td align="left">1.sequencefile存储格有压缩，存储空间小，有利于优化磁盘和I/O性能2.同时支持文件切割分片，提供了三种压缩方式：none,record,block（块级别压缩效率跟高）.默认是record(记录)</td>
</tr>
<tr>
<td align="left">rcfile</td>
<td>在hdfs上将表中的数据以二进制格式编码，并且支持压缩。下载后的数据不可以直接可视化。</td>
<td align="left">1.stored as rcfile</td>
<td align="left">1.行列混合的存储格式，基于列存储。</td>
</tr>
</tbody></table>
<h2 id="面试题摘要"><a href="#面试题摘要" class="headerlink" title="面试题摘要"></a>面试题摘要</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL</span></span><br><span class="line"><span class="comment">#数据与需求</span></span><br><span class="line">现有这么一批数据，现要求出：  </span><br><span class="line">每个用户截止到每月为止的最大单月访问次数和累计到该月的总访问次数  </span><br><span class="line">三个字段的意思：  </span><br><span class="line">用户名，月份，访问次数 </span><br><span class="line">A,2015-01,5</span><br><span class="line">A,2015-01,15</span><br><span class="line">B,2015-01,5</span><br><span class="line">A,2015-01,8</span><br><span class="line">B,2015-01,25</span><br><span class="line">A,2015-01,5</span><br><span class="line">A,2015-02,4</span><br><span class="line">A,2015-02,6</span><br><span class="line">B,2015-02,10</span><br><span class="line">B,2015-02,5</span><br><span class="line">A,2015-03,16</span><br><span class="line">A,2015-03,22</span><br><span class="line">B,2015-03,23</span><br><span class="line">B,2015-03,10</span><br><span class="line">B,2015-03,11</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> infos(<span class="keyword">name</span> <span class="keyword">string</span>, <span class="built_in">date</span> <span class="keyword">string</span>, ftime <span class="built_in">int</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">&quot;/root/j.txt&quot;</span> <span class="keyword">into</span> <span class="keyword">table</span> infos;</span><br><span class="line"></span><br><span class="line"><span class="comment">#sql(窗口写法)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">name</span>,mydate,</span><br><span class="line"><span class="keyword">max</span>(t1.ints) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> mydate),</span><br><span class="line">t1.ints,</span><br><span class="line"><span class="keyword">sum</span>(ints) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> mydate <span class="keyword">rows</span>  <span class="keyword">between</span>  <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span>  <span class="keyword">current</span> <span class="keyword">row</span> )</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">name</span>,mydate,<span class="keyword">sum</span>(ints) <span class="keyword">as</span> ints</span><br><span class="line"><span class="keyword">from</span> infos1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  <span class="keyword">name</span>,mydate) t1;</span><br><span class="line"></span><br><span class="line">sql(考虑使用自连接实现)</span><br><span class="line">//核心where datea &lt;= dateb</span><br><span class="line"><span class="keyword">select</span> nameb, dateb, visitb,</span><br><span class="line"><span class="keyword">max</span>(visita) <span class="keyword">as</span> max_visit,</span><br><span class="line"><span class="keyword">sum</span>(visita) <span class="keyword">as</span> sum_visit</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">a.name <span class="keyword">as</span> namea,</span><br><span class="line">a.mydate <span class="keyword">as</span> datea,</span><br><span class="line">a.visit <span class="keyword">as</span> visita,</span><br><span class="line">b.name <span class="keyword">as</span> nameb,</span><br><span class="line">b.mydate <span class="keyword">as</span> dateb,</span><br><span class="line">b.visit <span class="keyword">as</span> visitb</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">name</span>,mydate,<span class="keyword">sum</span>(ints) <span class="keyword">as</span> visit <span class="keyword">from</span> infos1 <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>,mydate) a <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">name</span>,mydate,<span class="keyword">sum</span>(ints) <span class="keyword">as</span> visit <span class="keyword">from</span> infos1 <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>,mydate)  b</span><br><span class="line"><span class="keyword">on</span> a.name = b.name</span><br><span class="line"> ) t1</span><br><span class="line"><span class="keyword">where</span> datea &lt;= dateb</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> nameb, dateb, visitb;</span><br></pre></td></tr></table></figure>



<p>//SQL实现dense_rank()排序,sum()的窗口的实现</p>
]]></content>
      <categories>
        <category>The Hadoop Ecosystem</category>
        <category>Learning Hive</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
        <tag>Work Systematically</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce实践</title>
    <url>/2020/11/23/MapReduce-API/</url>
    <content><![CDATA[<h1 id="MapReduce-API"><a href="#MapReduce-API" class="headerlink" title="MapReduce API"></a>MapReduce API</h1><p>Mapreduce 是一个分布式运算程序的编程框架，是用户开发“基于 hadoop 的数据分析 应用”的核心框架。Mapreduce 核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完整的 分布式运算程序，并发运行在一个hadoop 集群上</p>
<h2 id="FileInputformatCase"><a href="#FileInputformatCase" class="headerlink" title="FileInputformatCase"></a>FileInputformatCase</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 20:29</span></span><br><span class="line"><span class="comment"> * 对FileInputformatCase中TestInputformatCase的简单实现(默认)</span></span><br><span class="line"><span class="comment"> * 案例统计字母出现的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_WordCount1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Configuration con;</span><br><span class="line">    <span class="keyword">static</span> IntWritable wordtimes = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> Text text = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\a.txt&quot;</span>, <span class="string">&quot;C:\\MapReduce3&quot;</span>&#125;;</span><br><span class="line">        con = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        job.setMapperClass(Map_MR_WordCount1.class);</span><br><span class="line">        job.setReducerClass(Reduce_MR_WordCount1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        job.setNumReduceTasks(<span class="number">1</span>);</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;正确&quot;</span> : <span class="string">&quot;错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (String word : value.toString().split(<span class="string">&quot;\\s+&quot;</span>)) &#123;</span><br><span class="line">                text.set(word);</span><br><span class="line">                context.write(text, wordtimes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(key, <span class="keyword">new</span> IntWritable(num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.FileInputformatCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapred.lib.CombineTextInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 21:02</span></span><br><span class="line"><span class="comment"> * 处理小文件的一个方法 ComnineTextInputformat</span></span><br><span class="line"><span class="comment"> * 案例统计字母出现个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_WordCount2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Configuration con;</span><br><span class="line">    <span class="keyword">static</span> IntWritable wordtimes = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> Text text = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\Desktop\\wordcount&quot;</span>, <span class="string">&quot;C:\\MapReduce&quot;</span>&#125;;</span><br><span class="line">        con = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        job.setMapperClass(MR_WordCount1.Map_MR_WordCount1.class);</span><br><span class="line">        job.setReducerClass(MR_WordCount1.Reduce_MR_WordCount1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">//ComnineTextInputformat 方法不设置就就是默认的text</span></span><br><span class="line">        job.setInputFormatClass(CombineTextInputFormat.class);</span><br><span class="line">        <span class="comment">//设置大小</span></span><br><span class="line">        CombineTextInputFormat.setMaxInputSplitSize(job,<span class="number">4192304</span>);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        job.setNumReduceTasks(<span class="number">1</span>);</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;正确&quot;</span> : <span class="string">&quot;错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (String word : value.toString().split(<span class="string">&quot;\\s+&quot;</span>)) &#123;</span><br><span class="line">                text.set(word);</span><br><span class="line">                context.write(text, wordtimes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(key, <span class="keyword">new</span> IntWritable(num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.FileInputformatCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.KeyValueLineRecordReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 21:49</span></span><br><span class="line"><span class="comment"> * keyvalues形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_WordCount3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Configuration con;</span><br><span class="line">    <span class="keyword">static</span> IntWritable wordtimes = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> Text text = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\word_keyvalue.txt&quot;</span>, <span class="string">&quot;C:\\MapReduce5&quot;</span>&#125;;</span><br><span class="line">        con = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="comment">//设置</span></span><br><span class="line">        con.set(KeyValueLineRecordReader.KEY_VALUE_SEPARATOR,<span class="string">&quot; &quot;</span>);</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        job.setMapperClass(Map_MR_WordCount1.class);</span><br><span class="line">        job.setReducerClass(Reduce_MR_WordCount1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">//设置</span></span><br><span class="line">        job.setInputFormatClass(KeyValueTextInputFormat.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        job.setNumReduceTasks(<span class="number">1</span>);</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;正确&quot;</span> : <span class="string">&quot;错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (String word : value.toString().split(<span class="string">&quot;\\s+&quot;</span>)) &#123;</span><br><span class="line">                text.set(word);</span><br><span class="line">                context.write(key, wordtimes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(key, <span class="keyword">new</span> IntWritable(num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.FileInputformatCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.NLineInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User:</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 22:23</span></span><br><span class="line"><span class="comment"> *  NLineInputFormat 按照行来切片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_WordCount4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Configuration con;</span><br><span class="line">    <span class="keyword">static</span> IntWritable wordtimes = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> Text text = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\word.nl.txt&quot;</span>, <span class="string">&quot;C:\\MapReduce3&quot;</span>&#125;;</span><br><span class="line">        con = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//设置  三行一切</span></span><br><span class="line">        NLineInputFormat.setNumLinesPerSplit(job,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置</span></span><br><span class="line">        job.setInputFormatClass(NLineInputFormat.class);</span><br><span class="line">        job.setMapperClass(MR_WordCount1.Map_MR_WordCount1.class);</span><br><span class="line">        job.setReducerClass(MR_WordCount1.Reduce_MR_WordCount1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        job.setNumReduceTasks(<span class="number">1</span>);</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;正确&quot;</span> : <span class="string">&quot;错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (String word : value.toString().split(<span class="string">&quot;\\s+&quot;</span>)) &#123;</span><br><span class="line">                text.set(word);</span><br><span class="line">                context.write(text, wordtimes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_MR_WordCount1</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(key, <span class="keyword">new</span> IntWritable(num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.FileInputformatCase;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 22:31</span></span><br><span class="line"><span class="comment"> * 自定义切片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_WordCount5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="CombinerCase"><a href="#CombinerCase" class="headerlink" title="CombinerCase"></a>CombinerCase</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_Combiner</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description: </span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 10:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="JoinCase"><a href="#JoinCase" class="headerlink" title="JoinCase"></a>JoinCase</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.JoinCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 22:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableBean1</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">private</span> String Pid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line">    <span class="keyword">private</span> String Pname;</span><br><span class="line">    <span class="keyword">private</span> String Flog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">                <span class="string">&quot;ID=&quot;</span> + ID +</span><br><span class="line">                        <span class="string">&quot; Pid=&quot;</span> + Pid +</span><br><span class="line">                        <span class="string">&quot; amount=&quot;</span> + amount +</span><br><span class="line">                        <span class="string">&quot; Pname=&quot;</span> + Pname +</span><br><span class="line">                        <span class="string">&quot; Flog=&quot;</span> + Flog;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setID</span><span class="params">(<span class="keyword">int</span> ID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">        Pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Pname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPname</span><span class="params">(String pname)</span> </span>&#123;</span><br><span class="line">        Pname = pname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Flog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlog</span><span class="params">(String flog)</span> </span>&#123;</span><br><span class="line">        Flog = flog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TableBean1</span><span class="params">(<span class="keyword">int</span> ID, String pid, <span class="keyword">int</span> amount, String pname, String flog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">        Pid = pid;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">        Pname = pname;</span><br><span class="line">        Flog = flog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TableBean1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeInt(ID);</span><br><span class="line">        dataOutput.writeUTF(Pid);</span><br><span class="line">        dataOutput.writeInt(amount);</span><br><span class="line">        dataOutput.writeUTF(Pname);</span><br><span class="line">        dataOutput.writeUTF(Flog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = dataInput.readInt();</span><br><span class="line">        <span class="keyword">this</span>.Pid = dataInput.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.amount = dataInput.readInt();</span><br><span class="line">        <span class="keyword">this</span>.Pname = dataInput.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.Flog = dataInput.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TableBean1(getID(), getPid(), getAmount(), getPname(), getFlog());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.JoinCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileSplit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 22:32</span></span><br><span class="line"><span class="comment"> * 简单join的实现 两张表  实现在reduce端的join</span></span><br><span class="line"><span class="comment"> * 首先在setup方法中获取文件的名字 比如 order.txt 和 pd.txt</span></span><br><span class="line"><span class="comment"> * key 和 value 的设置,两张表有重合部分作为key 这样排序后在同一个迭代器中</span></span><br><span class="line"><span class="comment"> * 集合遍历取代原来的</span></span><br><span class="line"><span class="comment"> * order.txt  id pid amount</span></span><br><span class="line"><span class="comment"> * pd.txt   pid pname</span></span><br><span class="line"><span class="comment"> * ...这个案例检查了好久 出现如下bug :dataInput和 dataOutput写入读取的顺序不一致,spilt[]的顺序不一致</span></span><br><span class="line"><span class="comment"> * 没有往集合中添加数据........</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_Join1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Configuration con;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\jointask&quot;</span>, <span class="string">&quot;C:\\MAPREDYCE1&quot;</span>&#125;;</span><br><span class="line">        con = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;MR_Join1&quot;</span>);</span><br><span class="line">        job.setMapperClass(Map_Join1.class);</span><br><span class="line">        job.setReducerClass(Reduce_Join1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(TableBean1.class);</span><br><span class="line">        job.setOutputKeyClass(TableBean1.class);</span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        job.setNumReduceTasks(<span class="number">1</span>);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;zq&quot;</span> : <span class="string">&quot;cw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map_Join1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">TableBean1</span>&gt; </span>&#123;</span><br><span class="line">        String name = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//获取读取的文件的名字</span></span><br><span class="line">            FileSplit inputSplit = (FileSplit) context.getInputSplit();</span><br><span class="line">            name = inputSplit.getPath().getName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//按行切</span></span><br><span class="line">            TableBean1 tableBean = <span class="keyword">new</span> TableBean1();</span><br><span class="line">            Text text = <span class="keyword">new</span> Text();</span><br><span class="line">            String[] split = value.toString().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;order&quot;</span>)) &#123;</span><br><span class="line">                tableBean.setID(Integer.parseInt(split[<span class="number">0</span>]));</span><br><span class="line">                tableBean.setPid(split[<span class="number">1</span>]);</span><br><span class="line">                tableBean.setAmount(Integer.parseInt(split[<span class="number">2</span>]));</span><br><span class="line">                tableBean.setPname(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                tableBean.setFlog(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">                text.set(split[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tableBean.setID(<span class="number">0</span>);</span><br><span class="line">                tableBean.setPid(split[<span class="number">0</span>]);</span><br><span class="line">                tableBean.setAmount(<span class="number">0</span>);</span><br><span class="line">                tableBean.setPname(split[<span class="number">1</span>]);</span><br><span class="line">                tableBean.setFlog(<span class="string">&quot;pd&quot;</span>);</span><br><span class="line">                text.set(split[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(text, tableBean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_Join1</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">TableBean1</span>, <span class="title">TableBean1</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;TableBean1&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//存放订单表</span></span><br><span class="line">            List&lt;TableBean1&gt; tableBean1s = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//存放pd表</span></span><br><span class="line">            TableBean1 tableBeanPD = <span class="keyword">new</span> TableBean1();</span><br><span class="line">            <span class="keyword">for</span> (TableBean1 value : values) &#123;</span><br><span class="line">                TableBean1 clone = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;order&quot;</span>.equals(value.getFlog())) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        clone = (TableBean1) value.clone();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    tableBean1s.add(clone);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        tableBeanPD = (TableBean1) value.clone();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (TableBean1 tableBean1 : tableBean1s) &#123;</span><br><span class="line">                tableBean1.setPid(tableBeanPD.getPname());</span><br><span class="line">                context.write(tableBean1, NullWritable.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="PartitionAndGroupingCase"><a href="#PartitionAndGroupingCase" class="headerlink" title="PartitionAndGroupingCase"></a>PartitionAndGroupingCase</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.OutputformatCase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HbaseBean1</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String movie;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HbaseBean1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovie</span><span class="params">(String movie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRate</span><span class="params">(<span class="keyword">double</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimeStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeStamp</span><span class="params">(<span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HbaseBean1</span><span class="params">(String movie, <span class="keyword">double</span> rate, <span class="keyword">long</span> timeStamp, String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Movie&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;movie=&#x27;&quot;</span> + movie + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, rate=&quot;</span> + rate +</span><br><span class="line">                <span class="string">&quot;, timeStamp=&quot;</span> + timeStamp +</span><br><span class="line">                <span class="string">&quot;, uid=&#x27;&quot;</span> + uid + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeUTF(movie);</span><br><span class="line">        dataOutput.writeDouble(rate);</span><br><span class="line">        dataOutput.writeLong(timeStamp);</span><br><span class="line">        dataOutput.writeUTF(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = dataInput.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.rate = dataInput.readDouble();</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = dataInput.readLong();</span><br><span class="line">        <span class="keyword">this</span>.uid = dataInput.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.OutputformatCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.io.ImmutableBytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableReducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-12</span></span><br><span class="line"><span class="comment"> * Time: 22:19</span></span><br><span class="line"><span class="comment"> * Hbase与MR的交互</span></span><br><span class="line"><span class="comment"> * 案例:电影案例 分析:设计rowkey  ImmutableBytesWritable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_Hbase1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\hbase.json&quot;</span>&#125;;</span><br><span class="line">        Configuration con = HBaseConfiguration.create();</span><br><span class="line">        con.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;linux03,linux04,linux05&quot;</span>);</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;MR_Hbase&quot;</span>);</span><br><span class="line">        job.setMapperClass(MAP_Hbase1.class);</span><br><span class="line">        job.setReducerClass(Reduce_Hbase1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(HbaseBean1.class);</span><br><span class="line">        <span class="comment">// 穿件扫描对象用来扫描源hbase中的所有的数据</span></span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        <span class="comment">// 接收的扫描的数据的行数</span></span><br><span class="line">        scan.setCaching(<span class="number">200</span>);</span><br><span class="line">        scan.setCacheBlocks(<span class="keyword">false</span>);</span><br><span class="line">        job.setJarByClass(HbaseBean1.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入数据的路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 插入数据的表要存在</span></span><br><span class="line">        TableMapReduceUtil.initTableReducerJob(<span class="string">&quot;movie1&quot;</span>, Reduce_Hbase1.class, job);</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;zq&quot;</span> : <span class="string">&quot;cw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MAP_Hbase1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">HbaseBean1</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">static</span>  Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">                    <span class="comment">//电影名字和时间龊构成一个rowkey</span></span><br><span class="line">            HbaseBean1 hbaseBean = <span class="keyword">null</span>;</span><br><span class="line">            Text text = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hbaseBean = gson.fromJson(value.toString(), HbaseBean1.class);</span><br><span class="line">                String movie = StringUtils.leftPad(hbaseBean.getMovie(), <span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                String movieStamp = StringUtils.leftPad( String.valueOf(hbaseBean.getTimeStamp()),<span class="number">9</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                text = <span class="keyword">new</span> Text();</span><br><span class="line">                text.set(movie+<span class="string">&quot;_&quot;</span>+movieStamp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            context.write(text,hbaseBean);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_Hbase1</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">Text</span>, <span class="title">HbaseBean1</span>, <span class="title">ImmutableBytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;HbaseBean1&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//key是rowkey values,迭代器只存储了一个</span></span><br><span class="line">            Put put = <span class="keyword">new</span> Put(key.toString().getBytes());</span><br><span class="line">            <span class="keyword">for</span> (HbaseBean1 value : values) &#123;</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;moviename&quot;</span>.getBytes(),value.getMovie().getBytes());</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;movierate&quot;</span>.getBytes(),String.valueOf(value.getRate()).getBytes());</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;moviestamp&quot;</span>.getBytes(),String.valueOf(value.getTimeStamp()).getBytes());</span><br><span class="line">                put.addColumn(<span class="string">&quot;cf&quot;</span>.getBytes(),<span class="string">&quot;movieuid&quot;</span>.getBytes(),value.getUid().getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(<span class="keyword">null</span>,put);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="OutputformatCase"><a href="#OutputformatCase" class="headerlink" title="OutputformatCase"></a>OutputformatCase</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.PartitionAndGrouping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 14:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">Movie</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String movie;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovie</span><span class="params">(String movie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRate</span><span class="params">(<span class="keyword">double</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimeStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeStamp</span><span class="params">(<span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">(String movie, <span class="keyword">double</span> rate, <span class="keyword">long</span> timeStamp, String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Movie&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;movie=&#x27;&quot;</span> + movie + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, rate=&quot;</span> + rate +</span><br><span class="line">                <span class="string">&quot;, timeStamp=&quot;</span> + timeStamp +</span><br><span class="line">                <span class="string">&quot;, uid=&#x27;&quot;</span> + uid + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Movie movie)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//重写排序规则  用户名字相同按rate排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.uid.equals(movie.uid) ? Double.compare(movie.rate, <span class="keyword">this</span>.rate) : <span class="keyword">this</span>.uid.compareTo(movie.uid);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeUTF(movie);</span><br><span class="line">        dataOutput.writeDouble(rate);</span><br><span class="line">        dataOutput.writeLong(timeStamp);</span><br><span class="line">        dataOutput.writeUTF(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = dataInput.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.rate = dataInput.readDouble();</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = dataInput.readLong();</span><br><span class="line">        <span class="keyword">this</span>.uid = dataInput.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.PartitionAndGrouping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 16:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie1</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">Movie1</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String movie;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp;</span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Movie_TOPN&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;movie=&#x27;&quot;</span> + movie + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, rate=&quot;</span> + rate +</span><br><span class="line">                <span class="string">&quot;, timeStamp=&quot;</span> + timeStamp +</span><br><span class="line">                <span class="string">&quot;, uid=&#x27;&quot;</span> + uid + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Movie1</span><span class="params">(String movie, <span class="keyword">double</span> rate, <span class="keyword">long</span> timeStamp, String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovie</span><span class="params">(String movie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRate</span><span class="params">(<span class="keyword">double</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimeStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeStamp</span><span class="params">(<span class="keyword">long</span> timeStamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Movie1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeUTF(movie);</span><br><span class="line">        dataOutput.writeDouble(rate);</span><br><span class="line">        dataOutput.writeLong(timeStamp);</span><br><span class="line">        dataOutput.writeUTF(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movie = dataInput.readUTF();</span><br><span class="line">        <span class="keyword">this</span>.rate = dataInput.readDouble();</span><br><span class="line">        <span class="keyword">this</span>.timeStamp = dataInput.readLong();</span><br><span class="line">        <span class="keyword">this</span>.uid = dataInput.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Movie1 movie1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.movie.equals(movie1.movie) ? Double.compare(movie1.rate, <span class="keyword">this</span>.rate) : <span class="keyword">this</span>.movie.compareTo(movie1.movie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>   <span class="keyword">new</span> Movie1(getMovie(),getRate(),getTimeStamp(),getUid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.PartitionAndGrouping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User:tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 10:52</span></span><br><span class="line"><span class="comment"> * 重写分区分组方法</span></span><br><span class="line"><span class="comment"> * 案例:从众多的电影评论中获取每个用户评分排名全三的电影,按电影名排序,电影名相同采用评分排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_PartitionAndGroup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Configuration con;</span><br><span class="line">    <span class="keyword">static</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\test.json&quot;</span>, <span class="string">&quot;C:\\MapReduce&quot;</span>&#125;;</span><br><span class="line">        con = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;MR_PartitionAndGroup&quot;</span>);</span><br><span class="line">        <span class="comment">//设置来源</span></span><br><span class="line">        job.setMapperClass(Map_PartitionAndGroup.class);</span><br><span class="line">        job.setReducerClass(Reduce_PartitionAndGroup.class);</span><br><span class="line">        <span class="comment">//设置输入 输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Movie.class);</span><br><span class="line">        job.setMapOutputValueClass(NullWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Movie.class);</span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        <span class="comment">//设置分区标准</span></span><br><span class="line">        job.setPartitionerClass(MyPartion.class);</span><br><span class="line">        <span class="comment">//设置分组标准</span></span><br><span class="line">        job.setGroupingComparatorClass(MyComparator.class);</span><br><span class="line">        <span class="comment">//设置数据 输入 输出路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">//设置reduce的个数</span></span><br><span class="line">        job.setNumReduceTasks(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map_PartitionAndGroup</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Movie</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Movie movie = gson.fromJson(value.toString(), Movie.class);</span><br><span class="line">                context.write(movie, NullWritable.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">//捕捉异常,不处理异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_PartitionAndGroup</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Movie</span>, <span class="title">NullWritable</span>, <span class="title">Movie</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Movie key, Iterable&lt;NullWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (NullWritable value : values) &#123;</span><br><span class="line">                context.write(key, NullWritable.get());</span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写分区方法,按uid分区</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartion</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Movie</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Movie movie, NullWritable nullWritable, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//按原码来,其实可自定义</span></span><br><span class="line">            <span class="keyword">return</span> (movie.getUid().hashCode() &amp; Integer.MAX_VALUE) % i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写分组方法 按uid来排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Movie.class, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</span><br><span class="line">            Movie A = (Movie) a;</span><br><span class="line">            Movie B = (Movie) b;</span><br><span class="line">            <span class="keyword">return</span> A.getUid().compareTo(B.getUid());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongyongtao.BigData.MapReduce.PartitionAndGrouping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonSyntaxException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * User: tongyongtao</span></span><br><span class="line"><span class="comment"> * Date: 2020-10-08</span></span><br><span class="line"><span class="comment"> * Time: 16:30</span></span><br><span class="line"><span class="comment"> * 使用set方法在处理reduce之后的工作</span></span><br><span class="line"><span class="comment"> * 案例:获取电影评论数排名前10的电影</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MR_PartitionAndGroup1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Configuration con;</span><br><span class="line">    <span class="keyword">static</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        args = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;C:\\Users\\hp\\IdeaProjects\\GitHub_Maven\\src\\main\\resources\\test.json&quot;</span>, <span class="string">&quot;C:\\MapReduce2&quot;</span>&#125;;</span><br><span class="line">        con = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(con, <span class="string">&quot;MR_PartitionAndGroup1&quot;</span>);</span><br><span class="line">        job.setMapperClass(Map_PartitionAndGroup1.class);</span><br><span class="line">        job.setReducerClass(Reduce_PartitionAndGroup1.class);</span><br><span class="line">        job.setMapOutputKeyClass(Movie1.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Movie1.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setPartitionerClass(MyPartion.class);</span><br><span class="line">        job.setGroupingComparatorClass(MyComparator.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">//设置reduce数量最好为1</span></span><br><span class="line">        job.setNumReduceTasks(<span class="number">2</span>);</span><br><span class="line">        System.out.println(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map_PartitionAndGroup1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Movie1</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">//  IntWritable intWritable = new IntWritable(1);</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Movie1 movie = gson.fromJson(value.toString(), Movie1.class);</span><br><span class="line">                context.write(movie, <span class="keyword">new</span> IntWritable(<span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Movie1, Integer&gt; movie_topn = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce_PartitionAndGroup1</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Movie1</span>, <span class="title">IntWritable</span>, <span class="title">Movie1</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Movie1 key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//reducetask拉取maptask端 聚合排序每一组相同的key在一个迭代器中</span></span><br><span class="line">            <span class="comment">//这里注意迭代器只有一个对象,采用赋值或者克隆的方法</span></span><br><span class="line">            <span class="comment">// BeanUtils.copyProperties();同样也可</span></span><br><span class="line">            Movie1 movie = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                movie = (Movie1) key.clone();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// context.write(key,new IntWritable(sum));</span></span><br><span class="line">            movie_topn.put(movie, sum);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//set方法最终执行 有且执行一次,采取构建一个集合存储</span></span><br><span class="line">            <span class="comment">//hashmap集合中存储 key是movie 值是数量  进行排序取值</span></span><br><span class="line">            List&lt;Map.Entry&lt;Movie1, Integer&gt;&gt; TopNmovies = <span class="keyword">new</span> ArrayList&lt;&gt;(movie_topn.entrySet());</span><br><span class="line">            TopNmovies.sort((t1, t2) -&gt; Integer.compare(t2.getValue(), t1.getValue()));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.min(<span class="number">3</span>, TopNmovies.size()); i++) &#123;</span><br><span class="line">                context.write(TopNmovies.get(i).getKey(), <span class="keyword">new</span> IntWritable(TopNmovies.get(i).getValue()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按movie来分区</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartion</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Movie1</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Movie1 movie_topn, IntWritable intWritable, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (movie_topn.getMovie().hashCode() &amp; Integer.MAX_VALUE) % i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按movie来排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Movie1.class, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</span><br><span class="line">            Movie1 A = (Movie1) a;</span><br><span class="line">            Movie1 B = (Movie1) b;</span><br><span class="line">            <span class="keyword">return</span> A.getMovie().compareTo(B.getMovie());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>The Hadoop Ecosystem</category>
        <category>Learning Hadoop</category>
      </categories>
      <tags>
        <tag>Bigdata</tag>
        <tag>Work Systematically</tag>
      </tags>
  </entry>
</search>
